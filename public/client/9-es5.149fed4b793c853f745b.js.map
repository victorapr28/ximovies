{"version":3,"sources":["webpack:///src/common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme.service.ts","webpack:///src/common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/themes-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/themes-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-categories.service.ts","webpack:///src/common/core/ui/custom-menu/menu-item.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component.ts","webpack:///src/common/shared/icon-selector/icon-selector.component.html","webpack:///src/common/shared/icon-selector/icon-selector.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-items/menu-items.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-items/menu-items.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component.html","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component.html","webpack:///src/common/admin/appearance/appearance.component.html","webpack:///src/common/admin/appearance/appearance.component.ts","webpack:///src/common/admin/appearance/can-deactivate-appearance.guard.ts","webpack:///src/common/admin/appearance/appearance-editor/appearance-editor-resolver.service.ts","webpack:///src/common/admin/appearance/appearance-routing.module.ts","webpack:///src/common/shared/icon-selector/icon-selector.module.ts","webpack:///src/common/admin/appearance/base-appearance.module.ts","webpack:///src/common/core/ui/color-picker/color-picker-input/color-picker-input.module.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/slider.js","webpack:///src/app/admin/appearance/app-appearance.module.ts"],"names":["GeneralAppearancePanelComponent","CssThemeService","fb","editor","form","this","group","defaults","Object","keys","controls","forEach","key","currentValue","patchValue","valueChanges","subscribe","value","addChanges","defaultSettings","http","get","params","post","id","put","ids","CrupdateCssThemeModalComponent","dialogRef","data","cssTheme","toast","loading$","BehaviorSubject","errors$","name","is_dark","default_dark","default_light","theme","pipe","filter","setValue","update","create","response","open","close","err","next","messages","CssThemeColorsPanelComponent","themes","colorCache","setSaveRequest","saveColors","bind","entries","colors","color","addControl","initiated$","setColors","payload","postMessage","replace","$event","stopPropagation","ThemesAppearancePanelComponent","MenuEditor","MenuItemCategoriesService","appearance","modal","router","route","loadedThemes$","selectedTheme$","path$","map","path","push","reloadThemes","querySub","unsubscribe","afterClosed","newTheme","navigate","queryParams","queryParamsHandling","setSelectedTheme","closeActivePanel","show","title","body","ok","confirmed","deleteTheme","all","finalize","pagination","bindToQueryParams","find","t","openPreviousPanel","MenuItem","type","order","condition","target","position","activeExact","Math","floor","random","settings","allMenus$","activeMenu$","allMenus","commitChanges","previousIndex","currentIndex","activeMenu","items","i","indexOf","splice","item","transformLocalLinksToRoutes","baseUrl","getBaseUrl","action","menus","JSON","stringify","setConfig","json","parse","menuData","menu","getWithCache","AddMenuItemPanelComponent","overlayPanelRef","itemCategories","linkForm","label","menuItemCategories","categories","addItem","reset","addLinkMenuItem","IconSelectorComponent","icons$","iconSelected","icons","icon","observers","length","emitValue","MenuItemsComponent","overlayPanel","cd","subscriptions","subscription","e","reorderActiveMenuItems","selectedMenuItem","removeItem","origin","menuItem","valueChanged","detectChanges","MenusAppearancePanelComponent","panel","el","setFromJson","slice","offsetX","panelClass","deleteActive","SeoAppearancePanelComponent","seoFields","field","control","CodeEditorModalComponent","CustomCodeAppearancePanelComponent","lazyLoader","syntaxInvalid$","initEditor","contents","language","overrideDialogCloseEvents","getValue","loadAsset","then","ace","edit","editorEl","nativeElement","getSession","setMode","setTheme","$blockScrolling","Infinity","on","annotations","getAnnotations","test","text","setAnnotations","syntaxInvalid","a","disableClose","backdropClick","keydownEvents","event","keyCode","confirm","initialValue","newValue","saveChanges","addCodeToPreview","content","openModal","CanDeactivateAppearance","AppearanceComponent","AppearanceEditorResolver","AppearanceRoutingModule","IconSelectorModule","BaseAppearanceModule","ColorPickerInputModule","breakpoints","leftColumnIsHidden","panelPortal$","activePanel$","component","isMobile$","init","iframe","snapshot","routerSub","openPanel","str","closeEditor","toggleLeftSidebar","changes$","bodyBold","cancel","routes","permissions","resolve","state","catchError","mergeMap","of","canActivate","canDeactivate","children","forChild","MatSliderModule","AppAppearanceModule","ɵmod","ɵinj","factory","imports"],"mappings":"szEAWaA,ECAAC,E,gODAN,IAAMD,EAAN,WASH,WACYE,EACDC,2BADC,KAAAD,KACD,KAAAC,SAVJ,KAAAC,KAAOC,KAAKH,GAAGI,MAAM,CACxB,sBAAuB,CAAC,IACxB,qBAAsB,CAAC,IACvB,mBAAoB,CAAC,IACrB,eAAgB,CAAC,IACjB,4BAA6B,CAAC,MAN/B,wDAcO,WACAC,EAAW,GACjBC,OAAOC,KAAKJ,KAAKD,KAAKM,UAAUC,SAAQC,YACtCL,EAASK,GAAOP,EAAKF,OAAOU,aAAaD,MAE3CP,KAAKD,KAAKU,WAAWP,GAErBF,KAAKD,KAAKW,aAAaC,WAAUC,YAC7BZ,EAAKF,OAAOe,WAAWD,QAtB5B,mCA0BiBL,GAChB,OAAOP,KAAKF,OAAOgB,gBAAgBP,OA3BpC,M,oCAAMZ,GAA+B,sB,uBAA/BA,EAA+B,q1BEX5C,kCAA4C,+BAAQ,EAAAG,OAAA,sBAA2B,OAE/E,gBACI,mCACI,qCACJ,OAEA,mCACI,sCACJ,OAEA,mCACI,oBACJ,OAEA,gBACI,kBAAgC,qBAAS,OACzC,mBACJ,OAEA,iBACI,mBAA6C,4BAAgB,OAC7D,sBACJ,OACJ,Q,MAxBuB,uBAElB,iCACuB,mEAIA,kEAIA,gEAMiB,2DAKI,0E,oIDX1C,IAAMF,EAAN,WACH,WAAoBmB,2BAAA,KAAAA,OADjB,mDAIC,OAAOf,KAAKe,KAAKC,IATR,eAKV,6BAOWC,GACV,OAAOjB,KAAKe,KAAKG,KAbR,YAauBD,KARjC,6BAWWE,EAAIF,GACd,OAAOjB,KAAKe,KAAKK,IAAVpB,oBAA6BmB,GAAMF,KAZ3C,6BAeWI,GACV,OAAOrB,KAAKe,KAALf,2BAAgCqB,QAhBxC,M,oCAAMzB,GAAe,Y,yBAAfA,EAAe,QAAfA,EAAe,qBAFZ,S,iDEPR,iBAA+B,uBAAY,Q,sBAC3C,iBAAgC,uBAAY,Q,yBAYxC,iBAAuC,QAAe,Q,uBAAf,sB,sBAsBvC,eAAwC,iBAAM,Q,sBAE1C,eAAM,iBAAM,Q,qCA7B5B,iBAAM,+DACF,+BACI,gBACI,mBAAwB,eAAI,OAC5B,mBACA,uBACJ,OAEA,iBACI,8BAA+D,qBAAU,OACzE,eAAS,iEAAqD,OAClE,OAEA,kBACI,+BAAyE,8BAAkB,OAC3F,eAAS,oEAAwD,OACrE,OAEA,kBACI,+BAA2E,+BAAmB,OAC9F,eAAS,qEAAyD,OACtE,OACJ,OAEA,8BACI,qBAAQ,0DAAiD,kBAAM,OAC/D,qB,iBACI,yBACA,0CAGJ,OACJ,OACJ,O,yCAjC8C,yBAKf,4BAqBgC,gDAC7C,kCAAiC,eClB5C,IAAM0B,EAAN,IAAMA,EAAN,WAUH,WACYC,EACwBC,EACxBC,EACAC,EACA7B,sCAJA,KAAA0B,YACwB,KAAAC,OACxB,KAAAC,WACA,KAAAC,QACA,KAAA7B,KAdL,KAAA8B,SAAW,IAAIC,EAAA,MACf,KAAAC,QAAU,IAAID,EAAA,EAA0D,IACxE,KAAA7B,KAAOC,KAAKH,GAAGI,MAAM,CACxB6B,KAAM,CAAC,IACPC,QAAS,EAAC,GACVC,aAAc,EAAC,GACfC,cAAe,EAAC,KAUZT,EAAKU,OACLlC,KAAKD,KAAKU,WAAWe,EAAKU,OAK9BlC,KAAKD,KAAKiB,IAAI,gBACTN,aACAyB,KAAK,OAAAC,EAAA,IAAOxB,YAAKA,QAAMA,MACvBD,WAAU,WACPX,EAAKD,KAAKiB,IAAI,iBAAiBqB,UAASA,MAEhDrC,KAAKD,KAAKiB,IAAI,iBACTN,aACAyB,KAAK,OAAAC,EAAA,IAAOxB,YAAKA,QAAMA,MACvBD,WAAU,WACPX,EAAKD,KAAKiB,IAAI,gBAAgBqB,UAASA,MAjChD,uDAqCa,YACIrC,KAAKwB,KAAKU,MACtBlC,KAAKyB,SAASa,OAAOtC,KAAKwB,KAAKU,MAAMf,GAAInB,KAAKD,KAAKa,OACnDZ,KAAKyB,SAASc,OAAOvC,KAAKD,KAAKa,QAE3BD,WAAU6B,YACdxC,EAAK0B,MAAMe,KAAKzC,EAAKwB,KAAKU,MAAQ,gBAAkB,iBACpDlC,EAAK0C,MAAMF,EAASN,UACrBS,YAAGA,OAAI3C,EAAK6B,QAAQe,KAAKD,EAAIE,eA7CjC,4BAgDUX,GACTlC,KAAKuB,UAAUmB,MAAMR,OAjDtB,M,oCAAMZ,GAA8B,eAY3B,KAAe,8B,uBAZlBA,EAA8B,27BDnB3C,gBACI,eACI,uBACA,uBACJ,OACA,mBAAsB,gCAAS,EAAAoB,WAC3B,qBACJ,OACJ,OAEA,wB,uBARc,kCACA,mCAOmD,2C,mRET7D,aACI,+BAAwD,QAAuB,OACnF,Q,gCADwB,sCAAoC,iCCWzD,IAAMI,EAAN,IAAMA,EAAN,WAKH,WACYhD,EACAiD,2BADA,KAAAjD,SACA,KAAAiD,SALL,KAAAhD,KAAO,IAAI,IAAU,IACpB,KAAAiD,WAA6B,GAHlC,wDAUO,WACNhD,KAAKF,OAAOmD,eAAejD,KAAKkD,WAAWC,KAAKnD,OAGhDG,OAAOiD,QAAQpD,KAAKkC,MAAMmB,QAAQ/C,SAAQ,YAAQgD,0BAANxB,EAAMwB,YAC9CtD,EAAKD,KAAKwD,WAAWzB,EAAM,IAAI,IAAYwB,OAG/CtD,KAAKF,OAAO0D,WAAW7C,WAAU,WAC7BX,EAAKyD,UAAUzD,EAAKkC,MAAMmB,QAC1BrD,EAAKD,KAAKW,aAAaC,WAAWC,YAC9BZ,EAAKyD,UAAU7C,GACfZ,EAAKF,OAAOe,WAAW,CAAC,OAAUD,YAtB3C,oCA4BCZ,KAAKF,OAAOmD,eAAe,QA5B5B,iCA+BgBS,GACf,OAAO1D,KAAK+C,OAAOT,OAAOtC,KAAKkC,MAAMf,GAAIuC,KAhC1C,gCAmCeL,cACdlD,OAAOiD,QAAQC,GAAQ/C,SAAQ,YAAQgD,0BAANxB,EAAMwB,YAG/BtD,EAAKgD,WAAWlB,KAAUwB,IAC1BtD,EAAKF,OAAO6D,YAAY,IAAI,IAAU7B,EAAMwB,IAC5CtD,EAAKgD,WAAWlB,GAAQwB,QAzCjC,+BA8CaxB,GACZ,OAAOA,EAAK8B,QAAQ,MAAO,IAAIA,QAAQ,KAAM,SA/C9C,M,oCAAMd,GAA4B,oB,uBAA5BA,EAA4B,0LDbzC,eACI,qB,mBAGJ,Q,MAJI,yBACI,mD,6GEEJ,mC,KACQ,a,6CAOA,eAAiE,yFAC7D,gBAAkB,QAAc,OAChC,iBAAqB,yCAASe,EAAOC,qBACjC,oBAAsC,yFAClC,sBACJ,OACA,oBAAsC,+FAClC,sBACJ,OACA,oBAAsC,8FAClC,sBACJ,OACJ,OACJ,O,0BAZsB,sB,qCAH1B,mBAAgF,2EAAyC,oBAAS,OAClI,aACI,sB,gBAcJ,O,qBAdyB,mDCO1B,IAAMC,ECPAC,ECHAC,EFUN,IAAMF,EAAN,WAYH,WACWG,EACCC,EACApB,EACArB,EACA0C,EACAC,2BALD,KAAAH,aACC,KAAAC,QACA,KAAApB,SACA,KAAArB,QACA,KAAA0C,SACA,KAAAC,QAjBL,KAAA1C,SAAW,IAAIC,EAAA,MACf,KAAA0C,cAAgB,IAAI1C,EAAA,EAA4B,IAChD,KAAA2C,eAAiB,IAAI3C,EAAA,EAA0B,MAG/C,KAAA4C,MAAQxE,KAAKuE,eAAepC,KAAK,OAAAsC,EAAA,IAAIvC,YACxC,IAAMwC,EAAO,CAAC,UAEd,OADIxC,GAAOwC,EAAKC,KAAKzC,EAAMJ,MACpB4C,MATR,wDAsBC1E,KAAK4E,iBAtBN,oCA0BC5E,KAAK6E,UAAY7E,KAAK6E,SAASC,gBA1BhC,6CA6B2B5C,cAC1BlC,KAAKmE,MAAM1B,KAAK,EAAgC,CAACP,UAC5C6C,cACApE,WAAUqE,YACHA,GACAhF,EAAK4E,oBAlClB,uCAuCqB1C,GACpBlC,KAAKoE,OAAOa,SAAS,GAAI,CAACC,YAAa,CAAChD,MAAOA,GAASA,EAAMf,IAAKgE,oBAAqB,YAxCzF,0CA4CKnF,KAAKuE,eAAe3D,MACpBZ,KAAKoF,mBAELpF,KAAKkE,WAAWmB,qBA/CrB,4CAmD0BnD,cACzBlC,KAAKmE,MAAMmB,KAAK,IAAuB,CACnCC,MAAO,eACPC,KAAO,8CACPC,GAAO,WACRV,cAAcpE,WAAU+E,YAChBA,GACP1F,EAAK2F,YAAYzD,QA1DtB,qCA8DmB,WAClBlC,KAAK2B,SAASiB,MAAKA,GACnB5C,KAAK+C,OAAO6C,MACPzD,KAAK,OAAA0D,EAAA,IAAS,kBAAM7F,EAAK2B,SAASiB,MAAKA,OACvCjC,WAAU6B,YACPxC,EAAKsE,cAAc1B,KAAKJ,EAASsD,WAAWtE,MAC5CxB,EAAK+F,yBApEd,kCAwEiB7D,cAChBlC,KAAK+C,OAAL/C,OAAmB,CAACkC,EAAMf,KAAKR,WAAU,WACrCX,EAAK0B,MAAMe,KAAK,iBAChBzC,EAAK4E,oBA3EV,0CA+EwB,WACnB5E,KAAK6E,WACT7E,KAAK6E,SAAW7E,KAAKqE,MAAMa,YAAYvE,WAAWM,YAC9C,IAAMiB,EAAQlC,EAAKsE,cAAc1D,MAAMoF,MAAKC,YAACA,OAAIA,EAAE9E,MAAQF,EAAOiB,SAClElC,EAAKuE,eAAe3B,KAAKV,WAnF9B,M,oCAAM6B,GAA8B,4D,uBAA9BA,EAA8B,2jB,GAAA,MDlB3C,kCAA8C,+BAAQ,EAAAmC,uB,gBAAqB,OAE3E,gBACI,yC,gBAKA,wCAmBJ,OAEA,8B,oCA7BuB,+BAKX,gDAA+D,cAwBxD,iD,+JI7BNC,GAgBT,aAA2C,IAA/BlF,EAA+B,uDAAH,GACpC,IAAK,IAAMa,KAD4B,wBAR3C,KAAAsE,KAAkC,OAClC,KAAAC,MAAQ,EAER,KAAAC,UAA+B,KAC/B,KAAAC,OAAiB,KACjB,KAAAC,SAAW,EACX,KAAAC,eAGuBxF,EACfjB,KAAK8B,GAAQb,EAAOa,GAExB9B,KAAKmB,GAAKuF,KAAKC,MAAsB,IAAhBD,KAAKE,W,uCFT3B,KAAM5C,EAAN,WAIH,WACY6C,EACA3C,2BADA,KAAA2C,WACA,KAAA3C,aALL,KAAA4C,UAAY,IAAIlF,EAAA,EAAyB,IACzC,KAAAmF,YAAc,IAAInF,EAAA,EAAsB,MAF5C,sDAUC,IAAMoF,EAAQA,mBAAOhH,KAAK8G,UAAUlG,OACpCZ,KAAK+G,YAAYnE,KAAK,IAAI,KAAK,CAACd,KAAM,cACtCkF,EAASrC,KAAK3E,KAAK+G,YAAYnG,OAC/BZ,KAAK8G,UAAUlE,KAAKoE,GACpBhH,KAAKiH,kBAdN,6CAiB2BC,EAAuBC,GACjD,IAAMC,EAAa,OAAH,UAAOpH,KAAK+G,YAAYnG,OACxC,aAAgBwG,EAAWC,MAAOH,EAAeC,GACjDnH,KAAK+G,YAAYnE,KAAKwE,GACtBpH,KAAKiH,kBArBN,qCAyBC,IAAMD,EAAQA,mBAAOhH,KAAK8G,UAAUlG,OAC9B0G,EAAIN,EAASO,QAAQvH,KAAK+G,YAAYnG,OAC5CoG,EAASQ,OAAOF,EAAG,GACnBtH,KAAK+G,YAAYnE,KAAK,MACtB5C,KAAK8G,UAAUlE,KAAKoE,GACpBhH,KAAKiH,kBA9BN,8BAiCYQ,GACX,IAAML,EAAa,OAAH,UAAOpH,KAAK+G,YAAYnG,OACxC6G,EAAOzH,KAAK0H,4BAA4BD,GACxCL,EAAWC,MAAM1C,KAAK8C,GACtBzH,KAAK+G,YAAYnE,KAAKwE,GACtBpH,KAAKiH,kBAtCN,iCAyCeQ,GACd,IAAML,EAAa,OAAH,UAAOpH,KAAK+G,YAAYnG,OAClC0G,EAAItH,KAAK+G,YAAYnG,MAAMyG,MAAME,QAAQE,GAC/CL,EAAWC,MAAMG,OAAOF,EAAG,GAC3BtH,KAAK+G,YAAYnE,KAAKwE,GACtBpH,KAAKiH,kBA9CN,kDAiDiCQ,GAChC,IAAME,EAAU3H,KAAK6G,SAASe,aAE9B,MAAkB,SAAdH,EAAKrB,OAAqD,IAAlCqB,EAAKI,OAAON,QAAQI,KAEhDF,EAAKrB,KAAO,QACZqB,EAAKI,OAASJ,EAAKI,OAAOjE,QAAQ5D,KAAK6G,SAASe,aAAc,KAHUH,IApDzE,sCA4DC,IAAMK,EAAQC,KAAKC,UAAUhI,KAAK8G,UAAUlG,OAC5CZ,KAAKkE,WAAW+D,UAAU,QAASH,GACnC9H,KAAKkE,WAAWrD,WAAW,CAAC,MAASiH,MA9DtC,kCAiEgBI,GACf,GAAOA,EAAP,CACA,IAAMJ,EAAQC,KAAKI,MAAMD,GAEzB,GAAOJ,EAAP,CAEA,IAAMd,EAAWc,EAAMrD,KAAI2D,YACvB,IAAMC,EAAO,IAAI,KAAKD,GAEtB,OADAC,EAAKhB,MAAQgB,EAAKhB,MAAM5C,KAAIgD,YAAIA,OAAI,IAAItB,GAASsB,MAC1CY,KAEXrI,KAAK8G,UAAUlE,KAAKoE,SA5ErB,M,oCAAMhD,GAAU,uB,yBAAVA,EAAU,QAAVA,EAAU,qBAFP,S,6BCDT,KAAMC,EAAN,WACH,WAAoBlD,2BAAA,KAAAA,OADjB,mDAIC,OAAOf,KAAKe,KAAKuH,aAAa,wCAJ/B,M,oCAAMrE,GAAyB,a,yBAAzBA,EAAyB,QAAzBA,EAAyB,qBAFtB,S,sDEqBA,iBACK,wFAAkC,QACvC,O,0BADuC,wB,sCAOvC,iBAAsD,0FAAkC,QAAc,O,0BAAd,uB,0BAHhG,gCACI,qCAA4B,4BAAuB,QAAiB,OAAkB,OACtF,iBACI,wBACJ,OACJ,Q,uBAJuD,qBAE7B,iCCpB3B,IAAMsE,GAAN,KAAMA,GAAN,WAOH,WACWzI,EACAoE,EACCsE,EACA3I,EACA4I,2BAJD,KAAA3I,SACA,KAAAoE,aACC,KAAAsE,kBACA,KAAA3I,KACA,KAAA4I,iBAXL,KAAAC,SAAW1I,KAAKH,GAAGI,MAAM,CAC5B4H,OAAQ,CAAC,IACTc,MAAO,CAAC,MAHT,wDAeO,WACN3I,KAAKyI,eAAezH,MAAML,WAAU6B,YAChCxC,EAAK4I,mBAAqBpG,EAASqG,gBAjBxC,wCAsBC7I,KAAKF,OAAOgJ,QAAQ,IAAI3C,GAAS,CAC7BC,KAAM,OACNuC,MAAO3I,KAAK0I,SAAS9H,MAAM+H,MAC3Bd,OAAQ7H,KAAK0I,SAAS9H,MAAMiH,UAGhC7H,KAAK0I,SAASK,QACd/I,KAAK0C,UA7BN,uCAgCqB2B,GACpBrE,KAAKF,OAAOgJ,QAAQ,IAAI3C,GAAS,CAC7BC,KAAM,QACNuC,MAAOtE,EACPwD,OAAQxD,KAEZrE,KAAK0C,UAtCN,wCAyCsB+E,GACrBzH,KAAKF,OAAOgJ,QAAQ,IAAI3C,GAASsB,IACjCzH,KAAK0C,UA3CN,8BA+CC1C,KAAKwI,gBAAgB9F,YA/CtB,M,oCAAM6F,IAAyB,mD,wBAAzBA,GAAyB,qxBDftC,gBACI,iBAA0B,wBAAa,OACvC,qBAA0B,gCAAS,EAAA7F,WAAS,OAChD,OACA,gBACI,wBACI,iBAAM,mCAAY,EAAAsG,qBACd,gCACI,qCAA4B,4BAAuB,gBAAI,OAAkB,OACzE,iBACI,iBACI,mBAAqC,eAAG,OACxC,oBACJ,OACA,iBACI,oBAAsC,qBAAS,OAC/C,oBACJ,OACJ,OACA,0BACI,qBAAsD,eAAG,OAC7D,OACJ,OACJ,OACA,iCACI,sCAA4B,6BAAuB,iBAAK,OAAkB,OAC1E,kBACI,yBAGJ,OACJ,OACA,yCAMJ,OACJ,Q,MAjC6C,qCAqBX,mEAKmB,+C,g5CEhCrD,mBAAwB,kFACtB,qBACF,O,0BADY,2BCYL,IAAMC,GAAN,KAAMA,GAAN,WAMH,WACYlI,EACAyH,2BADA,KAAAzH,OACA,KAAAyH,kBAPL,KAAAU,OAAoC,IAAItH,EAAA,EAAgB,IACxD,KAAAD,SAAqC,IAAIC,EAAA,MAEtC,KAAAuH,aAAe,IAAI,IAJ1B,wDAWO,WACNnJ,KAAK2B,SAASiB,MAAKA,GACnB5C,KAAKe,KAAKC,IAA+C,eACpDmB,KAAK,OAAA0D,EAAA,IAAS,kBAAM7F,EAAK2B,SAASiB,MAAKA,OACvCjC,WAAU6B,YACPxC,EAAKkJ,OAAOtG,KAAKJ,EAAS4G,YAhBnC,iCAoBeC,GAEVrJ,KAAKmJ,aAAaG,UAAUC,OAC5BvJ,KAAKmJ,aAAavG,KAAKyG,IAGvBrJ,KAAKwI,gBAAgBgB,UAAUH,GAC/BrJ,KAAKwI,gBAAgB9F,aA3B1B,M,oCAAMuG,IAAqB,wB,wBAArBA,GAAqB,2QDblC,0B,gBAIA,8B,uBAJmD,mCAIhC,iD,giBEDf,gCAIQ,wFAAmC,mFAIvC,qCACI,0BACI,qBACA,iBAAmB,QAAkB,OACzC,OACJ,OAEA,gBACI,gBACI,mBAA8C,gBAAK,OACnD,oBAAmB,wEAA4B,mDAAkDnB,MAAA,mBAAjG,OACJ,OAEA,iBACI,oBAA6C,gBAAI,OACjD,qBAAQ,uEAA2B,mDAAiDA,MAAA,mBAChF,qBAA2B,gBAAI,OAC/B,qBAA4B,iBAAK,OACjC,qBAA2B,gBAAI,OACnC,OACJ,OAEA,iBACI,oBAA+C,kBAAM,OACrD,oBAAmB,yEAA6B,mDAAmDA,MAAA,mBAAnG,OACJ,OAEA,iBACI,oBAAkD,qBAAS,OAC3D,qBAAQ,4EAAgC,mDAAsDA,MAAA,mBAC1F,qBAA+B,gBAAI,OACnC,qBAA2B,wCAA4B,OACvD,qBAA4B,oCAAwB,OACpD,qBAA4B,8BAAkB,OAClD,OACJ,OAEA,iBACI,oBAA+C,wBAAY,OAC3D,qBAAQ,yEAA6B,mDAAmDA,MAAA,mBACpF,qBAA4B,uBAAW,OACvC,qBAA6B,sBAAU,OAC3C,OACJ,OAEA,qBAA6D,sGACzD,oBAA6C,gBAAI,OACjD,oBAA4B,uEAA5B,OACA,uBACJ,OACJ,OAEA,0BACI,qBAAsD,6EAA0C,kBAAM,OAC1G,OACJ,O,0BAzDQ,qBAKuB,sBAMZ,kCACyC,oBAAA3G,GAAA,UAA7B,wBAIZ,iCAC6B,oBAAAA,GAAA,SAA5B,uBAQD,mCAC0C,oBAAAA,GAAA,WAA9B,yBAIZ,sCACkC,oBAAAA,GAAA,cAAjC,4BACI,6BAQL,mCAC+B,oBAAAA,GAAA,WAA9B,yBAOD,iCACiD,oBAAAA,GAAA,SAA5B,uBAClB,gC,sCAzD1B,0BAA2B,oFACvB,yCAgEJ,O,qBA7DY,iC,uBAgER,iBAAiC,sCAA2B,QCrDzD,IAAMsI,GAAN,KAAMA,GAAN,WAIH,WACW3B,EACC3D,EACAuF,EACAC,2BAHD,KAAA7B,QACC,KAAA3D,QACA,KAAAuF,eACA,KAAAC,KANL,KAAAC,cAAgC,GAFpC,2DAYC5J,KAAK4J,cAActJ,SAAQuJ,YACvBA,GAAgBA,EAAa/E,mBAblC,uCAiBqBgF,GACpB9J,KAAK8H,MAAMiC,uBAAuBD,EAAE5C,cAAe4C,EAAE3C,gBAlBtD,qCAwBmBM,GAEdzH,KAAKgK,iBADLhK,KAAKgK,mBAAqBvC,EACF,KAEAA,IA5B7B,gDAmC6B,WAC5BzH,KAAKmE,MAAMmB,KAAK,IAAuB,CACnCC,MAAO,mBACPC,KAAM,kDACNC,GAAI,WACLV,cAAcpE,WAAU+E,YAChBA,IACP1F,EAAK8H,MAAMmC,WAAWjK,EAAKgK,kBAC3BhK,EAAKgK,iBAAmB,WA3C7B,uCA+CqBE,EAAqBC,cACzCnK,KAAK0J,aAAajH,KAAK,GAAuB,CAC1C+D,SAAU,KACV0D,OAAQ,IAAI,IAAWA,KACxBE,eAAezJ,WAAU0I,YACxBc,EAASd,KAAOA,EAChBrJ,EAAK8H,MAAMb,gBACXjH,EAAK2J,GAAGU,uBAtDb,M,oCAAMZ,IAAkB,0C,wBAAlBA,GAAkB,sqC,GAAA,MDjB/B,gBAAyB,qBAAU,OAEnC,iC,gBAmEA,0C,mBAnE2E,mDAAkE,gB,23CEWzH,oBAAwF,QAA4B,Q,iCAA5G,kBAAgF,mC,sCAVxG,gBACI,gBACI,gBACI,kBAA6B,oBAAS,OACtC,kBAAkC,kEAA6B,kDAAkB3B,MAAA,mBAAjF,OACJ,OAEA,gBACI,kBAAiC,wBAAa,OAC9C,oBAA2B,sEAAiC,kDAAkBA,MAAA,mBAC1E,4BACJ,OACJ,OACJ,OAEA,sBAEA,kBACI,qBAAgC,wEAAsC,uBAAW,OACjF,qBAAsE,qEAAmC,oBAAQ,OACrH,OACJ,O,8BAjB8C,+BAKP,mCACM,6D,sCAerC,iBAAwE,sFACpE,kBAAmB,QAAa,OAChC,sBACJ,O,0BAFuB,sB,sCAF3B,iBACI,wB,gBAKA,iBACI,oBAAyD,+CAASA,MAAA,YAAsB,qBAAU,OACtG,OACJ,O,qBAR+B,qD,ICX1BwC,G,kCAAN,KAAMA,GAAN,WACH,WACWpG,EACA4D,EACC3D,EACA0C,EACA0D,EACAC,2BALD,KAAAtG,aACA,KAAA4D,QACC,KAAA3D,QACA,KAAA0C,WACA,KAAA0D,QACA,KAAAC,KAERxK,KAAK8H,MAAM2C,YAAYzK,KAAK6G,SAAS7F,IAAI,UAT1C,gEAaC,IAAMwF,EAAW,KAAekE,QAChClE,EAAS,GAAGmE,QAAU,GACtBnE,EAAS,GAAGmE,QAAU,GACtB3K,KAAKuK,MAAM9H,KAAK,GAA2B,CACvC+D,SAAUA,EACV0D,OAAQlK,KAAKwK,GACbI,WAAY,oCAnBjB,0CAwBK5K,KAAK8H,MAAMf,YAAYnG,MACvBZ,KAAK8H,MAAMf,YAAYnE,KAAK,MAE5B5C,KAAKkE,WAAWmB,qBA3BrB,oCA+BkBgD,GACjBrI,KAAK8H,MAAMf,YAAYnE,KAAKyF,KAhC7B,4CAmCyB,WACxBrI,KAAKmE,MAAMmB,KAAK,IAAuB,CACnCC,MAAO,cACPC,KAAM,6CACNC,GAAI,WACLV,cAAcpE,WAAU+E,YAChBA,GACP1F,EAAK8H,MAAM+C,oBA1ChB,qCA8CmB/I,GAClB,OAAOA,EAAK8B,QAAQ,KAAM,SA/C3B,M,oCAAM0G,IAA6B,+D,wBAA7BA,GAA6B,k4B,GAAA,MDjB1C,kCAAmG,+BAAQ,EAAApE,uBAAqB,OAEhI,gBACI,wB,gBAuBA,yCAYJ,Q,mBAtCuB,kFAGK,mDAAiE,gB,mXEAzF,QACI,gBACI,kBAA+B,QAAc,OAC7C,qBACJ,OACJ,Q,uBAHe,0BAAwB,qBACT,yBAAgB,wBAAhB,CAAgB,+B,ICWrC4E,G,sCAAN,KAAMA,GAAN,WAIH,WACWhL,EACCD,2BADD,KAAAC,SACC,KAAAD,KAJL,KAAAE,KAAOC,KAAKH,GAAGI,MAAM,IAFzB,wDASO,WACND,KAAK+K,UAAY/K,KAAKF,OAAOgB,gBAA4B,WAEzDd,KAAK+K,UAAUzK,SAAQ0K,YACnBhL,EAAKD,KAAKwD,WAAWyH,EAAMzK,IAAKP,EAAKH,GAAGoL,QAAQD,EAAMpK,WAG1DZ,KAAKD,KAAKW,aAAaC,WAAUC,YAC7BZ,EAAKF,OAAOe,WAAWD,UAjB5B,M,oCAAMkK,IAA2B,sB,wBAA3BA,GAA2B,0SDjBxC,kCAAiD,+BAAQ,EAAAhL,OAAA,sBAA2B,OAEpF,gBACI,gCAMJ,Q,MATuB,wBAElB,iCACa,sC,mMEMV,eAAuD,uEAAiE,QCWzH,IAAMoL,GCNAC,GDMN,KAAMD,GAAN,WAOH,WACY3J,EACwBC,EACxB4J,2BAFA,KAAA7J,YACwB,KAAAC,OACxB,KAAA4J,aAPL,KAAAzJ,SAAW,IAAIC,EAAA,MACf,KAAAyJ,eAAiB,IAAIzJ,EAAA,MAJzB,wDAcC5B,KAAKsL,WAAWtL,KAAKwB,KAAK+J,SAAUvL,KAAKwB,KAAKgK,UAC9CxL,KAAKyL,8BAfN,gCAmBCzL,KAAK0C,MAAM1C,KAAKF,OAAO4L,cAnBxB,4BAsBU9K,GACTZ,KAAKuB,UAAUmB,MAAM9B,KAvBtB,iCA0BgB2K,GAA6B,WAAXC,EAAW,8DAC5CxL,KAAK2B,SAASiB,MAAKA,GACnB5C,KAAKoL,WAAWO,UAAU,gBAAiB,CAACvF,KAAM,OAAOwF,MAAK,WAC1D5L,EAAKF,OAAS+L,IAAIC,KAAK9L,EAAK+L,SAASC,eACrChM,EAAKF,OAAOmM,aAAaC,QAAQ,YAAcV,GAC/CxL,EAAKF,OAAOqM,SAAS,oBACrBnM,EAAKF,OAAOsM,gBAAkBC,IAC1Bd,GAAUvL,EAAKF,OAAOuC,SAASkJ,EAAU,GAE7CvL,EAAKF,OAAOmM,aAAaK,GAAG,oBAAoB,WAC5C,IAAMC,EAAcvM,EAAKF,OAAOmM,aAAaO,iBAG7C,GAAID,EAAY,IAAM,gBAAgBE,KAAKF,EAAY,GAAGG,MAGtD,OAFAH,EAAY/E,OAAO,EAAG,QACtBxH,EAAKF,OAAOmM,aAAaU,eAAeJ,GAK5C,IAAMK,EAAgB5M,EAAKF,OACtBmM,aACAO,iBACApK,QAAOyK,YAACA,MAAe,UAAXA,EAAEzG,QACdmD,OAAS,EACdvJ,EAAKqL,eAAezI,KAAKgK,MAE7B5M,EAAK2B,SAASiB,MAAKA,QArDxB,kDA8DgC,WAC/B5C,KAAKuB,UAAUuL,gBAGf9M,KAAKuB,UAAUwL,gBAAgBpM,WAAU,WACrCX,EAAK0C,WAIT1C,KAAKuB,UAAUyL,gBACV7K,KAAK,OAAAC,EAAA,IAAO6K,YAAKA,OAAIA,EAAMC,UAAY,SACvCvM,WAAU,kBAAMX,EAAK0C,eAzE3B,M,oCAAMwI,IAAwB,eASrB,KAAe,a,wBATlBA,GAAwB,0D,MAAA,K,yiBDpBrC,gBACI,eAA+C,sBAAW,OAC1D,mBAAsB,gCAAS,EAAAxI,WAC3B,qBACJ,OACJ,OAEA,6BACI,gBACI,qBACA,kBACJ,OACJ,OAEA,8BACI,oBAAQ,gCAAS,EAAAA,WAAwC,kBAAM,OAC/D,oBAAuD,gCAAS,EAAAyK,a,iBAAqD,kBAAM,OAC/H,OAEA,gC,wBAVwB,8CAOuD,qDAG5D,kD,6YELZ,KAAMhC,GAAN,WAMH,WACWrL,EACCD,EACAsE,EACAzC,2BAHD,KAAA5B,SACC,KAAAD,KACA,KAAAsE,QACA,KAAAzC,QATL,KAAA3B,KAAOC,KAAKH,GAAGI,MAAM,CACxB,kBAAmB,CAAC,IACpB,mBAAoB,CAAC,MAHtB,wDAaO,WACAC,EAAW,GACjBC,OAAOC,KAAKJ,KAAKD,KAAKM,UAAUC,SAAQC,YACpCL,EAASK,GAAOP,EAAKF,OAAOU,aAAaD,MAE7CP,KAAKD,KAAKU,WAAWP,KAlBtB,gCAqBckG,cACP7F,EAAM,eAAiB6F,EACvBgH,EAAepN,KAAKD,KAAKa,MAAML,IAAQ,GAE7CP,KAAKmE,MAAM1B,KAAK,GADH,CAAC8I,SAAUvL,KAAKD,KAAKa,MAAML,GAAMiL,SAAUpF,IAEnDrB,cACApE,WAAUC,YAEP,YAAIA,GAAuBwM,IAAiBxM,EAA5C,CACA,IAAMyM,EAAQA,mBAAK9M,EAAMK,GACzBZ,EAAKD,KAAKU,WAAW4M,GACrBrN,EAAKF,OAAOwN,YAAYD,GAAU1M,WAAU,WACxCX,EAAKuN,iBAAiBnH,EAAMxF,GAC5BZ,EAAK0B,MAAMe,KAAK,8BAlC7B,uCAuCsB2D,EAAoBoH,GAErCxN,KAAKF,OAAO6D,YADH,QAATyC,EACwB,IAAI,IAAaoH,GAEjB,IAAI,IAAcA,QA3C/C,M,oCAAMrC,IAAkC,0C,wBAAlCA,GAAkC,qQCd/C,kCAAgD,+BAAQ,EAAArL,OAAA,sBAA2B,OAEnF,gBACG,mBAAuC,gCAAS,EAAA2N,UAAU,UACvD,iBAAyB,qBAAU,OACnC,iBAA4B,iBAAM,OACrC,OACA,mBAAyB,gCAAS,EAAAA,UAAU,WACzC,iBAAyB,mCAAwB,OACjD,kBAA4B,kBAAM,OACrC,OACH,Q,KAXuB,yB,gKCcP,kBAAwD,eAAI,Q,uBAExD,kBAAY,gBAAK,Q,sBAOrB,mC,sBACA,kC,sBACA,iC,sBACA,+B,sBACA,uC,wCAEI,gC,KAAoD,uB,kCADxD,QACI,yB,gBACJ,Q,mBADiB,+C,0BARzB,QACI,WACI,6CACA,4CACA,2CACA,yCACA,iDACA,iCAGJ,OACJ,Q,kBAVkB,gCACgB,uCACD,sCACD,qCACF,4CACQ,4C,sFAS9B,eACI,kBAAyB,QAA0B,OACnD,sBACJ,Q,iCAHoB,8BAAiB,4CACR,kC,0BAFjC,iBACI,sBAIJ,Q,kBAJyF,kDCrB9F,ICJMC,GDIAC,GELAC,GCiBAC,GCJAC,GCyDAC,GC5DAC,GNLN,KAAML,GAAN,WASH,WACW7N,EACCsE,EACAC,EACD4J,2BAHA,KAAAnO,SACC,KAAAsE,SACA,KAAAC,QACD,KAAA4J,cAVJ,KAAAC,sBAEA,KAAAC,aAAenO,KAAKF,OAAOsO,aAAajM,KAAK,OAAAsC,EAAA,IAAI8F,YAAKA,OACjDA,GAASA,EAAM8D,UAAa,IAAI,IAAgB9D,EAAM8D,WAAa,SAN5E,wDAgBO,WACNrO,KAAKkO,mBAAqBlO,KAAKiO,YAAYK,UAAU1N,MACrDZ,KAAKF,OAAOyO,KACRvO,KAAKwO,OAAOxC,cACZhM,KAAKqE,MAAMoK,SAASjN,KAAKV,iBAE7Bd,KAAK0O,UAAY1O,KAAKqE,MAAMa,YACvBvE,WAAWM,YACRjB,EAAKF,OAAO6O,UAAU1N,EAAOsJ,YAxBtC,oCA6BCvK,KAAK0O,WAAa1O,KAAK0O,UAAU5J,gBA7BlC,oCAiCC9E,KAAKoE,OAAOa,SAAS,CAAC,YAjCvB,8BAoCY2J,GACX,OAAO,YAAcA,KArCtB,+BAwCa9M,GACZ,OAAOA,EAAK8B,QAAQ,IAAK,OAzC1B,0CA6CC5D,KAAKkO,oBAAsBlO,KAAKkO,uBA7CjC,M,oCAAMP,IAAmB,0C,wBAAnBA,GAAmB,mD,MAAA,K,20BDfhC,gCACI,wB,gBACI,gBACI,gBAAyB,gCAAS,EAAAkB,iBAC9B,qBACJ,OACA,gBAAyB,4BAAiB,OAC1C,mBAIQ,gCAAS,EAAA/O,OAAA,iB,iCAGb,yB,iBACA,0CAGJ,OACJ,OAEA,iC,iBAaA,0CASJ,OAEA,+BACI,kBACI,wBACJ,OACJ,OACJ,OAEA,qBAAgB,gCAAS,EAAAgP,uBACrB,uBACJ,Q,+BArDiB,6CAA8B,wDAW3B,qFAEE,mDAA2C,cAO3C,uDAAmE,gB,w5CEVlF,KAAMpB,GAAN,WACH,WACY5N,EACAqE,2BADA,KAAArE,SACA,KAAAqE,QAHT,6DAOC,OAAOnE,KAAKF,OAAOiP,SAASnO,OAErBZ,KAAKmE,MAAMmB,KAAK,IAAuB,CAC1CC,MAAO,0BACPC,KAAM,oDACNwJ,SAAU,oCACVvJ,GAAI,QACJwJ,OAAQ,SACTlK,kBAfJ,M,oCAAM2I,IAAuB,sB,0BAAvBA,GAAuB,QAAvBA,GAAuB,qBAFpB,S,qEEFVwB,GAAiB,CACnB,CACIxK,KAAM,GACN2J,UAAW,GACX7M,KAAM,CAAC2N,YAAa,CAAC,sBACrBC,QAAS,CAACtO,iBDFL8M,GAAN,WACH,WACYxJ,EACArD,2BADA,KAAAqD,SACA,KAAArD,OAHT,qDAMKsD,EAA+BgL,cACnC,OAAOrP,KAAKe,KAAKC,IAAkD,2BAA2BmB,KAC1F,OAAAmN,GAAA,IAAW,kBACPtP,EAAKoE,OAAOa,SAAS,CAAC,WACf,QAEX,OAAAsK,GAAA,IAAS/M,YAAQA,OACTA,EACO,OAAAgN,GAAA,GAAGhN,IAEVxC,EAAKoE,OAAOa,SAAS,CAAC,WACf,cAjBpB,K,uCAAM2I,IAAwB,sB,0BAAxBA,GAAwB,QAAxBA,GAAwB,qBAFrB,S,KCKR6B,YAAa,CAAC,MACdC,cAAe,CAAC,IAChBC,SAAU,CACN,CAACjL,KAAM,IACP,CAACA,KAAM,UACP,CAACA,KAAM,yBASZ,KAAMmJ,GAAN,uC,qBAAMA,K,qDAAAA,KAAuB,SAHvB,CAAC,IAAa+B,SAASV,KACtB,O,iBCFP,KAAMpB,GAAN,uC,qBAAMA,K,qDAAAA,KAAkB,SAXlB,CACL,IACA,KAEA,IACA,Q,wDEGD,KAAME,GAAN,uC,qBAAMA,K,qDAAAA,KAAsB,SATtB,CACL,IACA,KACA,Q,IDkED,KAAMD,GAAN,uC,qBAAMA,K,qDAAAA,KAAoB,SA7CpB,CACL,GACA,IACA,IACA,IACA,GACA,KACA,KACA,KACA,GAGA,KACA,KACA,IACA,IACA,IACA,KACA,KACA,IACA,IACA,Q,iFEi1CF8B,GCj2COC,G,KDi2CPD,G,uCAEUE,UAAO,KAAwB,CAAE3J,KAAMyJ,KACvDA,GAAgBG,UAAO,KAAwB,CAAEC,QAAS,SAAiChK,GAAK,OAAO,IAAKA,GAAK4J,KAAuBK,QAAS,CAAC,CAAC,IAAc,MACzJ,Q,iBCr2CD,KAAMJ,GAAN,uC,qBAAMA,K,qDAAAA,KAAmB,SAlBnB,CACL,IACA,GACA,IACA,GACA,KACA,IACA,KAGA,IACA,IACA,KACA,GACA,KACA,S","file":"x","sourcesContent":["import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\n\n@Component({\n    selector: 'general-appearance-panel',\n    templateUrl: './general-appearance-panel.component.html',\n    styleUrls: ['./general-appearance-panel.component.scss'],\n    host: {'class': 'appearance-panel'},\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GeneralAppearancePanelComponent implements OnInit {\n    public form = this.fb.group({\n        'branding.logo_light': [''],\n        'branding.logo_dark': [''],\n        'branding.favicon': [''],\n        'env.app_name': [''],\n        'branding.site_description': [''],\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        public editor: AppearanceEditor,\n    ) {}\n\n    ngOnInit() {\n        const defaults = {};\n        Object.keys(this.form.controls).forEach(key => {\n          defaults[key] = this.editor.currentValue(key);\n        });\n        this.form.patchValue(defaults);\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.addChanges(value);\n        });\n    }\n\n    public defaultValue(key: string) {\n        return this.editor.defaultSettings[key];\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\n\nconst BASE_URI = 'css-theme';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CssThemeService {\n    constructor(private http: AppHttpClient) {}\n\n    public all(): PaginatedBackendResponse<CssTheme> {\n        return this.http.get(BASE_URI);\n    }\n\n    public create(params: Partial<CssTheme>): BackendResponse<{ theme: CssTheme }> {\n        return this.http.post(BASE_URI, params);\n    }\n\n    public update(id, params: Partial<CssTheme>): BackendResponse<{ theme: CssTheme }> {\n        return this.http.put(`${BASE_URI}/${id}`, params);\n    }\n\n    public delete(ids: number[]): BackendResponse<void> {\n        return this.http.delete(`${BASE_URI}/${ids}`);\n    }\n}\n","<appearance-panel-meta [path]=\"['General']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div [formGroup]=\"form\" class=\"appearance-panel-content many-inputs\">\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.logo_light')\" formControlName=\"branding.logo_light\" diskPrefix=\"branding_media\" highlightInPreview=\".logo\">\n        Logo #1 (For top navbar)\n    </appearance-image-input>\n\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.logo_dark')\" formControlName=\"branding.logo_dark\" diskPrefix=\"branding_media\" highlightInPreview=\".logo\">\n        Logo #2 (Everywhere else)\n    </appearance-image-input>\n\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.favicon')\" backendUri=\"uploads/favicon\" diskPrefix=\"branding_media\" formControlName=\"branding.favicon\">\n        Favicon\n    </appearance-image-input>\n\n    <div class=\"input-container\">\n        <label for=\"env.app_name\" trans>Site Name</label>\n        <input type=\"text\" id=\"env.app_name\" [placeholder]=\"defaultValue('env.app_name')\" formControlName=\"env.app_name\">\n    </div>\n\n    <div class=\"input-container\">\n        <label for=\"branding.site_description\" trans>Site Description</label>\n        <textarea id=\"branding.site_description\" [placeholder]=\"defaultValue('branding.site_description')\" rows=\"4\" formControlName=\"branding.site_description\"></textarea>\n    </div>\n</div>\n","<div class=\"modal-header\">\n    <h2 mat-dialog-title>\n        <span *ngIf=\"data.theme\" trans>Update Theme</span>\n        <span *ngIf=\"!data.theme\" trans>Create Theme</span>\n    </h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<form (ngSubmit)=\"confirm()\" ngNativeValidate [formGroup]=\"form\" *ngIf=\"errors$ | async as errors\">\n    <mat-dialog-content class=\"many-inputs\">\n        <div class=\"input-container\">\n            <label for=\"name\" trans>Name</label>\n            <input type=\"text\" id=\"name\" formControlName=\"name\" required minlength=\"3\">\n            <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"is_dark\" formControlName=\"is_dark\" trans>Dark Theme</mat-slide-toggle>\n            <p trans>Whether this theme has light text on dark background.</p>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"default_dark\" formControlName=\"default_dark\" trans>Default Dark Theme</mat-slide-toggle>\n            <p trans>Whether this theme should be used as default dark theme.</p>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"default_light\" formControlName=\"default_light\" trans>Default Light Theme</mat-slide-toggle>\n            <p trans>Whether this theme should be used as default light theme.</p>\n        </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n        <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n        <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>\n            <span *ngIf=\"data.theme; else creating\">Update</span>\n            <ng-template #creating>\n                <span>Create</span>\n            </ng-template>\n        </button>\n    </mat-dialog-actions>\n</form>\n\n\n","import {ChangeDetectionStrategy, Component, Inject} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {FormBuilder} from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\nimport {filter} from 'rxjs/operators';\n\ninterface CrupdateCssThemeModalData {\n    theme: CssTheme;\n}\n\n@Component({\n    selector: 'crupdate-css-theme-modal',\n    templateUrl: './crupdate-css-theme-modal.component.html',\n    styleUrls: ['./crupdate-css-theme-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateCssThemeModalComponent {\n    public loading$ = new BehaviorSubject(false);\n    public errors$ = new BehaviorSubject<{[K in keyof Partial<CssTheme>]: string}>({});\n    public form = this.fb.group({\n        name: [''],\n        is_dark: [false],\n        default_dark: [false],\n        default_light: [false],\n    });\n\n    constructor(\n        private dialogRef: MatDialogRef<CrupdateCssThemeModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateCssThemeModalData,\n        private cssTheme: CssThemeService,\n        private toast: Toast,\n        private fb: FormBuilder,\n    ) {\n        if (data.theme) {\n            this.form.patchValue(data.theme);\n        }\n\n        // make sure \"default_light\" and \"default_dark\"\n        // can't be toggled on at the same time\n        this.form.get('default_dark')\n            .valueChanges\n            .pipe(filter(value => !!value))\n            .subscribe(() => {\n                this.form.get('default_light').setValue(false);\n            });\n        this.form.get('default_light')\n            .valueChanges\n            .pipe(filter(value => !!value))\n            .subscribe(() => {\n                this.form.get('default_dark').setValue(false);\n            });\n    }\n\n    public confirm() {\n        const request = this.data.theme ?\n            this.cssTheme.update(this.data.theme.id, this.form.value) :\n            this.cssTheme.create(this.form.value);\n\n        request.subscribe(response => {\n            this.toast.open(this.data.theme ? 'Theme updated' : 'Theme created');\n            this.close(response.theme);\n        }, err => this.errors$.next(err.messages));\n    }\n\n    public close(theme?: CssTheme) {\n        this.dialogRef.close(theme);\n    }\n}\n","<ul [formGroup]=\"form\">\n    <li *ngFor=\"let color of theme.colors | keyvalue\">\n        <color-picker-input [formControlName]=\"color.key\" trans>{{viewName(color.key)}}</color-picker-input>\n    </li>\n</ul>\n","import {ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CssTheme, CssThemeColors} from '@common/core/types/models/CssTheme';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {SetColors} from '@common/shared/appearance/commands/appearance-commands';\nimport {AppearanceEditor, EditorChanges} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\n\n@Component({\n    selector: 'css-theme-colors-panel',\n    templateUrl: './css-theme-colors-panel.component.html',\n    styleUrls: ['./css-theme-colors-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CssThemeColorsPanelComponent implements OnInit, OnDestroy {\n    @Input() theme: CssTheme;\n    public form = new FormGroup({});\n    private colorCache: CssThemeColors = {};\n\n    constructor(\n        private editor: AppearanceEditor,\n        private themes: CssThemeService,\n    ) {}\n\n    ngOnInit() {\n        this.editor.setSaveRequest(this.saveColors.bind(this));\n\n        // build form\n        Object.entries(this.theme.colors).forEach(([name, color]) => {\n            this.form.addControl(name, new FormControl(color));\n        });\n\n        this.editor.initiated$.subscribe(() => {\n            this.setColors(this.theme.colors);\n            this.form.valueChanges.subscribe((value: CssThemeColors) => {\n                this.setColors(value);\n                this.editor.addChanges({'colors': value});\n            });\n        });\n    }\n\n    ngOnDestroy() {\n        this.editor.setSaveRequest(null);\n    }\n\n    private saveColors(payload: EditorChanges) {\n        return this.themes.update(this.theme.id, payload);\n    }\n\n    private setColors(colors: CssThemeColors) {\n        Object.entries(colors).forEach(([name, color]) => {\n            // make sure we only set colors that actually changed\n            // to keep performance as good as possible\n            if (this.colorCache[name] !== color) {\n                this.editor.postMessage(new SetColors(name, color));\n                this.colorCache[name] = color;\n            }\n        });\n    }\n\n    public viewName(name: string) {\n        return name.replace('be-', '').replace(/-/g, ' ');\n    }\n}\n","<appearance-panel-meta [path]=\"path$ | async\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\r\n\r\n<div class=\"appearance-panel-content\">\r\n    <css-theme-colors-panel\r\n            [theme]=\"selectedTheme\"\r\n            *ngIf=\"selectedTheme$ | async as selectedTheme else themesList\"\r\n    ></css-theme-colors-panel>\r\n\r\n    <ng-template #themesList>\r\n        <button mat-raised-button color=\"accent\" type=\"button\" class=\"new-theme-button\" (click)=\"openCrupdateThemeModal()\" trans>New Theme</button>\r\n        <ul>\r\n            <li class=\"nav-item\" *ngFor=\"let theme of loadedThemes$ | async\" (click)=\"setSelectedTheme(theme)\">\r\n                <div class=\"name\">{{theme.name}}</div>\r\n                <div class=\"actions\" (click)=\"$event.stopPropagation()\">\r\n                    <button mat-icon-button type=\"button\" (click)=\"setSelectedTheme(theme)\">\r\n                        <mat-icon svgIcon=\"drop-custom\"></mat-icon>\r\n                    </button>\r\n                    <button mat-icon-button type=\"button\" (click)=\"openCrupdateThemeModal(theme);\">\r\n                        <mat-icon svgIcon=\"edit\"></mat-icon>\r\n                    </button>\r\n                    <button mat-icon-button type=\"button\" (click)=\"maybeDeleteThemeModal(theme)\">\r\n                        <mat-icon svgIcon=\"delete\"></mat-icon>\r\n                    </button>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n    </ng-template>\r\n</div>\r\n\r\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay overlay-partial\"></loading-indicator>","import {ChangeDetectionStrategy, Component, OnDestroy, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {CrupdateCssThemeModalComponent} from '@common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {finalize, map} from 'rxjs/operators';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {ActivatedRoute, Router} from '@angular/router';\n\n@Component({\n    selector: 'themes-appearance-panel',\n    templateUrl: './themes-appearance-panel.component.html',\n    styleUrls: ['./themes-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ThemesAppearancePanelComponent implements OnInit, OnDestroy {\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public loadedThemes$ = new BehaviorSubject<CssTheme[]>([]);\n    public selectedTheme$ = new BehaviorSubject<CssTheme>(null);\n    private querySub: Subscription;\n\n    public path$ = this.selectedTheme$.pipe(map(theme => {\n        const path = ['Themes'];\n        if (theme) path.push(theme.name);\n        return path;\n    }));\n\n    constructor(\n        public appearance: AppearanceEditor,\n        private modal: Modal,\n        private themes: CssThemeService,\n        private toast: Toast,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.reloadThemes();\n    }\n\n    ngOnDestroy() {\n        this.querySub && this.querySub.unsubscribe();\n    }\n\n    public openCrupdateThemeModal(theme?: CssTheme) {\n        this.modal.open(CrupdateCssThemeModalComponent, {theme})\n            .afterClosed()\n            .subscribe(newTheme => {\n                if (newTheme) {\n                    this.reloadThemes();\n                }\n            });\n    }\n\n    public setSelectedTheme(theme?: CssTheme) {\n        this.router.navigate([], {queryParams: {theme: theme && theme.id}, queryParamsHandling: 'merge'});\n    }\n\n    public openPreviousPanel() {\n        if (this.selectedTheme$.value) {\n            this.setSelectedTheme();\n        } else {\n            this.appearance.closeActivePanel();\n        }\n    }\n\n    public maybeDeleteThemeModal(theme: CssTheme) {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Theme',\n            body:  'Are you sure you want to delete this theme?',\n            ok:    'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.deleteTheme(theme);\n        });\n    }\n\n    private reloadThemes() {\n        this.loading$.next(true);\n        this.themes.all()\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.loadedThemes$.next(response.pagination.data);\n                this.bindToQueryParams();\n            });\n    }\n\n    private deleteTheme(theme: CssTheme) {\n        this.themes.delete([theme.id]).subscribe(() => {\n            this.toast.open('Theme deleted');\n            this.reloadThemes();\n        });\n    }\n\n    private bindToQueryParams() {\n        if (this.querySub) return;\n        this.querySub = this.route.queryParams.subscribe((params: {theme?: string}) => {\n            const theme = this.loadedThemes$.value.find(t => t.id === +params.theme);\n            this.selectedTheme$.next(theme);\n        });\n    }\n}\n","import {Injectable} from '@angular/core';\r\nimport {moveItemInArray} from '@angular/cdk/drag-drop';\r\nimport {Menu} from '@common/core/ui/custom-menu/menu';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\r\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class MenuEditor {\r\n    public allMenus$ = new BehaviorSubject< Menu[]>([]);\r\n    public activeMenu$ = new BehaviorSubject<Menu>(null);\r\n\r\n    constructor(\r\n        private settings: Settings,\r\n        private appearance: AppearanceEditor,\r\n    ) {}\r\n\r\n    public create() {\r\n        const allMenus = [...this.allMenus$.value];\r\n        this.activeMenu$.next(new Menu({name: 'New Menu'}));\r\n        allMenus.push(this.activeMenu$.value);\r\n        this.allMenus$.next(allMenus);\r\n        this.commitChanges();\r\n    }\r\n\r\n    public reorderActiveMenuItems(previousIndex: number, currentIndex: number) {\r\n        const activeMenu = {...this.activeMenu$.value};\r\n        moveItemInArray(activeMenu.items, previousIndex, currentIndex);\r\n        this.activeMenu$.next(activeMenu);\r\n        this.commitChanges();\r\n    }\r\n\r\n    public deleteActive() {\r\n        const allMenus = [...this.allMenus$.value];\r\n        const i = allMenus.indexOf(this.activeMenu$.value);\r\n        allMenus.splice(i, 1);\r\n        this.activeMenu$.next(null);\r\n        this.allMenus$.next(allMenus);\r\n        this.commitChanges();\r\n    }\r\n\r\n    public addItem(item: MenuItem) {\r\n        const activeMenu = {...this.activeMenu$.value};\r\n        item = this.transformLocalLinksToRoutes(item);\r\n        activeMenu.items.push(item);\r\n        this.activeMenu$.next(activeMenu);\r\n        this.commitChanges();\r\n    }\r\n\r\n    public removeItem(item: MenuItem) {\r\n        const activeMenu = {...this.activeMenu$.value};\r\n        const i = this.activeMenu$.value.items.indexOf(item);\r\n        activeMenu.items.splice(i, 1);\r\n        this.activeMenu$.next(activeMenu);\r\n        this.commitChanges();\r\n    }\r\n\r\n    private transformLocalLinksToRoutes(item: MenuItem): MenuItem {\r\n        const baseUrl = this.settings.getBaseUrl();\r\n\r\n        if (item.type !== 'link' || item.action.indexOf(baseUrl) === -1) return item;\r\n\r\n        item.type = 'route';\r\n        item.action = item.action.replace(this.settings.getBaseUrl(), '');\r\n        return item;\r\n    }\r\n\r\n    public commitChanges() {\r\n        const menus = JSON.stringify(this.allMenus$.value);\r\n        this.appearance.setConfig('menus', menus);\r\n        this.appearance.addChanges({'menus': menus});\r\n    }\r\n\r\n    public setFromJson(json: string) {\r\n        if ( ! json) return;\r\n        const menus = JSON.parse(json);\r\n\r\n        if ( ! menus) return;\r\n\r\n        const allMenus = menus.map(menuData => {\r\n            const menu = new Menu(menuData);\r\n            menu.items = menu.items.map(item => new MenuItem(item));\r\n            return menu;\r\n        });\r\n        this.allMenus$.next(allMenus);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {MenuItemCategory} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-category';\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MenuItemCategoriesService {\n    constructor(private http: HttpCacheClient) {}\n\n    public get(): BackendResponse<{categories: MenuItemCategory[]}> {\n        return this.http.getWithCache('admin/appearance/menu-categories');\n    }\n}\n","export class MenuItem {\r\n    id: number|string;\r\n    label: string;\r\n    action: string;\r\n\r\n    // ID for model if action matches to specific model. If action\r\n    // points to a specific custom page, model_id will be that page's ID.\r\n    model_id: number;\r\n    type: 'page' | 'link' | 'route' = 'link';\r\n    order = 1;\r\n    icon: string;\r\n    condition: MenuItemCondition = null;\r\n    target: string = null;\r\n    position = 0;\r\n    activeExact = false;\r\n\r\n    constructor(params: Partial<MenuItem> = {}) {\r\n        for (const name in params) {\r\n            this[name] = params[name];\r\n        }\r\n        this.id = Math.floor(Math.random() * (1000 - 1));\r\n    }\r\n}\r\n\r\nexport type MenuItemCondition = string|string[]|Function;\r\n","<div class=\"header\">\r\n    <span class=\"title\" trans>New Menu Item</span>\r\n    <mat-icon svgIcon=\"close\" (click)=\"close()\"></mat-icon>\r\n</div>\r\n<div class=\"new-item-tabs\">\r\n    <mat-accordion>\r\n        <form (ngSubmit)=\"addLinkMenuItem()\" [formGroup]=\"linkForm\" ngNativeValidate>\r\n            <mat-expansion-panel class=\"mat-elevation-z\">\r\n                <mat-expansion-panel-header><mat-panel-title trans>Link</mat-panel-title></mat-expansion-panel-header>\r\n                <div class=\"many-inputs expansion-panel-content\">\r\n                    <div class=\"input-container\">\r\n                        <label for=\"external-link-url\" trans>URL</label>\r\n                        <input type=\"url\" id=\"external-link-url\" formControlName=\"action\" required>\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label for=\"external-link-text\" trans>Link Text</label>\r\n                        <input type=\"text\" id=\"external-link-text\" formControlName=\"label\" required>\r\n                    </div>\r\n                </div>\r\n                <mat-action-row>\r\n                    <button mat-button color=\"accent\" type=\"submit\" trans>Add</button>\r\n                </mat-action-row>\r\n            </mat-expansion-panel>\r\n        </form>\r\n        <mat-expansion-panel class=\"mat-elevation-z\">\r\n            <mat-expansion-panel-header><mat-panel-title trans>Route</mat-panel-title></mat-expansion-panel-header>\r\n            <div class=\"items-list expansion-panel-content\">\r\n                <div class=\"item\" *ngFor=\"let route of appearance.config.menus.availableRoutes\"\r\n                     (click)=\"addRouteMenuItem(route)\">{{route}}\r\n                </div>\r\n            </div>\r\n        </mat-expansion-panel>\r\n        <mat-expansion-panel class=\"mat-elevation-z\" *ngFor=\"let category of menuItemCategories\">\r\n            <mat-expansion-panel-header><mat-panel-title trans>{{category.name}}</mat-panel-title></mat-expansion-panel-header>\r\n            <div class=\"items-list expansion-panel-content\">\r\n                <div class=\"item\" *ngFor=\"let item of category.items\" (click)=\"addCustomMenuItem(item)\">{{item.label}}</div>\r\n            </div>\r\n        </mat-expansion-panel>\r\n    </mat-accordion>\r\n</div>","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\r\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\r\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\r\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\r\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\r\nimport {FormBuilder} from '@angular/forms';\r\nimport {MenuItemCategory} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-category';\r\nimport {MenuItemCategoriesService} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-categories.service';\r\n\r\n@Component({\r\n    selector: 'add-menu-item-panel',\r\n    templateUrl: './add-menu-item-panel.component.html',\r\n    styleUrls: ['./add-menu-item-panel.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AddMenuItemPanelComponent implements OnInit {\r\n    public linkForm = this.fb.group({\r\n        action: [''],\r\n        label: [''],\r\n    });\r\n    public menuItemCategories: MenuItemCategory[];\r\n\r\n    constructor(\r\n        public editor: MenuEditor,\r\n        public appearance: AppearanceEditor,\r\n        private overlayPanelRef: OverlayPanelRef,\r\n        private fb: FormBuilder,\r\n        private itemCategories: MenuItemCategoriesService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.itemCategories.get().subscribe(response => {\r\n            this.menuItemCategories = response.categories;\r\n        });\r\n    }\r\n\r\n    public addLinkMenuItem() {\r\n        this.editor.addItem(new MenuItem({\r\n            type: 'link',\r\n            label: this.linkForm.value.label,\r\n            action: this.linkForm.value.action,\r\n        }));\r\n\r\n        this.linkForm.reset();\r\n        this.close();\r\n    }\r\n\r\n    public addRouteMenuItem(route: string) {\r\n        this.editor.addItem(new MenuItem({\r\n            type: 'route',\r\n            label: route,\r\n            action: route,\r\n        }));\r\n        this.close();\r\n    }\r\n\r\n    public addCustomMenuItem(item: Partial<MenuItem>) {\r\n        this.editor.addItem(new MenuItem(item));\r\n        this.close();\r\n    }\r\n\r\n    public close() {\r\n        this.overlayPanelRef.close();\r\n    }\r\n}\r\n","<button mat-icon-button (click)=\"selectIcon(icon)\" *ngFor=\"let icon of icons$ | async\">\n  <mat-icon [svgIcon]=\"icon\"></mat-icon>\n</button>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay overlay-partial\"></loading-indicator>","import {ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {finalize} from 'rxjs/operators';\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\n\n@Component({\n    selector: 'icon-selector',\n    templateUrl: './icon-selector.component.html',\n    styleUrls: ['./icon-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class IconSelectorComponent implements OnInit {\n    public icons$: BehaviorSubject<string[]> = new BehaviorSubject([]);\n    public loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n    @Output() iconSelected = new EventEmitter<string>();\n\n    constructor(\n        private http: HttpCacheClient,\n        private overlayPanelRef: OverlayPanelRef,\n    ) {}\n\n    ngOnInit() {\n        this.loading$.next(true);\n        this.http.get<GenericBackendResponse<{icons: string[]}>>('admin/icons')\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.icons$.next(response.icons);\n            });\n    }\n\n    public selectIcon(icon: string) {\n        // component is used inline\n        if (this.iconSelected.observers.length) {\n            this.iconSelected.next(icon);\n        // component is used as overlay panel\n        } else {\n            this.overlayPanelRef.emitValue(icon);\n            this.overlayPanelRef.close();\n        }\n\n    }\n}\n","<div class=\"title\" trans>Menu Items</div>\r\n\r\n<mat-accordion cdkDropList (cdkDropListDropped)=\"reorderMenuItems($event)\" *ngIf=\"menus.activeMenu$ | async as activeMenu; else noActiveMenu\">\r\n    <mat-expansion-panel\r\n            class=\"mat-elevation-z menu-item-container\"\r\n            cdkDrag\r\n            *ngFor=\"let menuItem of activeMenu.items\"\r\n            (opened)=\"toggleMenuItem(menuItem)\"\r\n            (closed)=\"toggleMenuItem(menuItem)\"\r\n            [attr.data-id]=\"menuItem.id\"\r\n    >\r\n        <mat-expansion-panel-header>\r\n            <mat-panel-title>\r\n                <mat-icon class=\"drag-handle\" cdkDragHandle svgIcon=\"drag-handle\"></mat-icon>\r\n                <span class=\"name\">{{menuItem.label}}</span>\r\n            </mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n\r\n        <div class=\"many-inputs menu-item-list\">\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-label'}}\" trans>Label</label>\r\n                <input type=\"text\" [(ngModel)]=\"menuItem.label\" id=\"{{menuItem.id + '-label'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-type'}}\" trans>Type</label>\r\n                <select [(ngModel)]=\"menuItem.type\" id=\"{{menuItem.id + '-type'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n                    <option value=\"link\" trans>Link</option>\r\n                    <option value=\"route\" trans>Route</option>\r\n                    <option value=\"page\" trans>Page</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-action'}}\" trans>Action</label>\r\n                <input type=\"text\" [(ngModel)]=\"menuItem.action\" id=\"{{menuItem.id + '-action'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-condition'}}\" trans>Condition</label>\r\n                <select [(ngModel)]=\"menuItem.condition\" id=\"{{menuItem.id + '-condition'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n                    <option [ngValue]=\"null\" trans>None</option>\r\n                    <option value=\"auth\" trans>Show to Logged in Users Only</option>\r\n                    <option value=\"guest\" trans>Show to Guest Users Only</option>\r\n                    <option value=\"admin\" trans>Show to Admin Only</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"{{menuItem.id + '-target'}}\" trans>Open link in</label>\r\n                <select [(ngModel)]=\"menuItem.target\" id=\"{{menuItem.id + '-target'}}\" (ngModelChange)=\"menus.commitChanges()\">\r\n                    <option value=\"_self\" trans>Same Window</option>\r\n                    <option value=\"_blank\" trans>New Window</option>\r\n                </select>\r\n            </div>\r\n\r\n            <div class=\"input-container icon-input-container\" #iconInput (click)=\"openIconSelector(iconInput, menuItem)\">\r\n                <label for=\"{{menuItem.id + '-icon'}}\" trans>Icon</label>\r\n                <input type=\"text\" readonly [(ngModel)]=\"menuItem.icon\" id=\"{{menuItem.id + '-icon'}}\" placeholder=\"(Optional)\" trans-placeholder>\r\n                <mat-icon [svgIcon]=\"menuItem.icon\"></mat-icon>\r\n            </div>\r\n        </div>\r\n\r\n        <mat-action-row>\r\n            <button mat-button color=\"warn\" class=\"delete-button\" (click)=\"confirmMenuItemDeletion()\" trans>Remove</button>\r\n        </mat-action-row>\r\n    </mat-expansion-panel>\r\n</mat-accordion>\r\n\r\n<ng-template #noActiveMenu>\r\n    <div class=\"no-menu-items\" trans>This menu has no items yet.</div>\r\n</ng-template>\r\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnDestroy} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\r\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\r\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {IconSelectorComponent} from '@common/shared/icon-selector/icon-selector.component';\r\nimport {RIGHT_POSITION} from '@common/core/ui/overlay-panel/positions/right-position';\r\n\r\n@Component({\r\n    selector: 'menu-items',\r\n    templateUrl: './menu-items.component.html',\r\n    styleUrls: ['./menu-items.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MenuItemsComponent implements OnDestroy {\r\n    public selectedMenuItem: MenuItem;\r\n    public subscriptions: Subscription[] = [];\r\n\r\n    constructor(\r\n        public menus: MenuEditor,\r\n        private modal: Modal,\r\n        private overlayPanel: OverlayPanel,\r\n        private cd: ChangeDetectorRef,\r\n    ) {}\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => {\r\n            subscription && subscription.unsubscribe();\r\n        });\r\n    }\r\n\r\n    public reorderMenuItems(e: CdkDragDrop<void>) {\r\n        this.menus.reorderActiveMenuItems(e.previousIndex, e.currentIndex);\r\n    }\r\n\r\n    /**\r\n     * Toggle specified menu item settings panel visibility.\r\n     */\r\n    public toggleMenuItem(item: MenuItem) {\r\n        if (this.selectedMenuItem === item) {\r\n            this.selectedMenuItem = null;\r\n        } else {\r\n            this.selectedMenuItem = item;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ask user to confirm menu item deletion.\r\n     */\r\n    public confirmMenuItemDeletion() {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Delete Menu Item',\r\n            body: 'Are you sure you want to delete this menu item?',\r\n            ok: 'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.menus.removeItem(this.selectedMenuItem);\r\n            this.selectedMenuItem = null;\r\n        });\r\n    }\r\n\r\n    public openIconSelector(origin: HTMLElement, menuItem: MenuItem) {\r\n        this.overlayPanel.open(IconSelectorComponent, {\r\n            position: RIGHT_POSITION,\r\n            origin: new ElementRef(origin),\r\n        }).valueChanged().subscribe(icon => {\r\n            menuItem.icon = icon;\r\n            this.menus.commitChanges();\r\n            this.cd.detectChanges();\r\n        });\r\n    }\r\n}\r\n","<appearance-panel-meta [path]=\"['Menus', menus.activeMenu$.value && menus.activeMenu$.value.name]\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\r\n\r\n<div class=\"appearance-panel-content\">\r\n    <div class=\"menu-panel\" *ngIf=\"menus.activeMenu$ | async as activeMenu; else allMenuList\">\r\n        <div class=\"many-inputs menu-settings\">\r\n            <div class=\"input-container\">\r\n                <label for=\"menu-name\" trans>Menu Name</label>\r\n                <input type=\"text\" id=\"menu-name\" [(ngModel)]=\"activeMenu.name\" (ngModelChange)=\"menus.commitChanges()\">\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"menu-position\" trans>Menu Position</label>\r\n                <select id=\"menu-position\" [(ngModel)]=\"activeMenu.position\" (ngModelChange)=\"menus.commitChanges()\">\r\n                    <option [ngValue]=\"position\" *ngFor=\"let position of appearance.config.menus.positions\">{{getDisplayName(position)}}</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n\r\n        <menu-items></menu-items>\r\n\r\n        <div class=\"action-buttons\">\r\n            <button mat-button color=\"warn\" (click)=\"confirmMenuDeletion()\" trans>Delete Menu</button>\r\n            <button class=\"button flat add-item-button\" mat-button color=\"accent\" (click)=\"openAddItemPanel()\" trans>Add Item</button>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #allMenuList>\r\n        <div class=\"menus\">\r\n            <div class=\"menu nav-item\" *ngFor=\"let menu of menus.allMenus$ | async\" (click)=\"setActiveMenu(menu)\">\r\n                <span class=\"name\">{{menu.name}}</span>\r\n                <mat-icon svgIcon=\"keyboard-arrow-right\" class=\"actions\"></mat-icon>\r\n            </div>\r\n\r\n            <div class=\"action-buttons\">\r\n                <button mat-button color=\"accent\" class=\"button primary\" (click)=\"menus.create()\" trans>Add a Menu</button>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n</div>","import {ChangeDetectionStrategy, Component, ElementRef} from '@angular/core';\r\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\r\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\r\nimport {RIGHT_POSITION} from '@common/core/ui/overlay-panel/positions/right-position';\r\nimport {AddMenuItemPanelComponent} from '@common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component';\r\nimport {Menu} from '@common/core/ui/custom-menu/menu';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\n\r\n@Component({\r\n    selector: 'menus-appearance-panel',\r\n    templateUrl: './menus-appearance-panel.component.html',\r\n    styleUrls: ['./menus-appearance-panel.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MenusAppearancePanelComponent {\r\n    constructor(\r\n        public appearance: AppearanceEditor,\r\n        public menus: MenuEditor,\r\n        private modal: Modal,\r\n        private settings: Settings,\r\n        private panel: OverlayPanel,\r\n        private el: ElementRef<HTMLElement>,\r\n    ) {\r\n        this.menus.setFromJson(this.settings.get('menus'));\r\n    }\r\n\r\n    public openAddItemPanel() {\r\n        const position = RIGHT_POSITION.slice();\r\n        position[0].offsetX = 10;\r\n        position[1].offsetX = 10;\r\n        this.panel.open(AddMenuItemPanelComponent, {\r\n            position: position,\r\n            origin: this.el,\r\n            panelClass: 'add-menu-item-panel-container'\r\n        });\r\n    }\r\n\r\n    public openPreviousPanel() {\r\n        if (this.menus.activeMenu$.value) {\r\n            this.menus.activeMenu$.next(null);\r\n        } else {\r\n            this.appearance.closeActivePanel();\r\n        }\r\n    }\r\n\r\n    public setActiveMenu(menu: Menu) {\r\n        this.menus.activeMenu$.next(menu);\r\n    }\r\n\r\n    public confirmMenuDeletion() {\r\n        this.modal.show(ConfirmModalComponent, {\r\n            title: 'Delete Menu',\r\n            body: 'Are you sure you want to delete this menu?',\r\n            ok: 'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.menus.deleteActive();\r\n        });\r\n    }\r\n\r\n    public getDisplayName(name: string) {\r\n        return name.replace(/-/g, ' ');\r\n    }\r\n}\r\n","<appearance-panel-meta [path]=\"['Seo Settings']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div [formGroup]=\"form\" class=\"appearance-panel-content many-inputs\">\n    <ng-container *ngFor=\"let field of seoFields\">\n        <div class=\"input-container\">\n            <label [for]=\"field.key\" trans>{{field.name}}</label>\n            <textarea type=\"text\" [id]=\"field.key\" [formControlName]=\"field.key\" [placeholder]=\"field.defaultValue\" rows=\"2\"></textarea>\n        </div>\n    </ng-container>\n</div>","import {Component, OnInit, ChangeDetectionStrategy} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {FormBuilder} from '@angular/forms';\n\ninterface SeoField {\n    name: string;\n    key: string;\n    defaultValue: string;\n    value: string;\n}\n\n@Component({\n    selector: 'seo-appearance-panel',\n    templateUrl: './seo-appearance-panel.component.html',\n    styleUrls: ['./seo-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SeoAppearancePanelComponent implements OnInit {\n    public seoFields: SeoField[];\n    public form = this.fb.group({});\n\n    constructor(\n        public editor: AppearanceEditor,\n        private fb: FormBuilder,\n    ) {}\n\n    ngOnInit() {\n        this.seoFields = this.editor.defaultSettings['seo_fields'];\n\n        this.seoFields.forEach(field => {\n            this.form.addControl(field.key, this.fb.control(field.value));\n        });\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.addChanges(value);\n        });\n    }\n}\n","<div class=\"modal-header\">\r\n    <h2 class=\"modal-title\" mat-dialog-title trans>Code Editor</h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<mat-dialog-content>\r\n    <div class=\"editor-container\">\r\n        <p class=\"info\" *ngIf=\"data.language === 'html'\" trans>If entering javascript, wrap it with &lt;script>&lt;/script> tag.</p>\r\n        <div class=\"editor\" #editor></div>\r\n    </div>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions>\r\n    <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\r\n    <button type=\"submit\" mat-raised-button color=\"accent\" (click)=\"confirm()\" [disabled]=\"syntaxInvalid$ | async\" trans>Update</button>\r\n</mat-dialog-actions>\r\n\r\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>","import {ChangeDetectionStrategy, Component, ElementRef, Inject, OnInit, ViewChild} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {filter} from 'rxjs/operators';\r\nimport {ESCAPE} from '@angular/cdk/keycodes';\r\nimport {LazyLoaderService} from '@common/core/utils/lazy-loader.service';\r\nimport {BehaviorSubject} from 'rxjs';\r\n\r\ndeclare let ace;\r\n\r\nexport interface CodeEditorModalData {\r\n    contents?: string;\r\n    language: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'code-editor-modal',\r\n    templateUrl: './code-editor-modal.component.html',\r\n    styleUrls: ['./code-editor-modal.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CodeEditorModalComponent implements OnInit {\r\n    @ViewChild('editor', { static: true }) editorEl: ElementRef;\r\n\r\n    public loading$ = new BehaviorSubject<boolean>(false);\r\n    public syntaxInvalid$ = new BehaviorSubject<boolean>(false);\r\n    private editor;\r\n\r\n    constructor(\r\n        private dialogRef: MatDialogRef<CodeEditorModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: CodeEditorModalData,\r\n        private lazyLoader: LazyLoaderService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.initEditor(this.data.contents, this.data.language);\r\n        this.overrideDialogCloseEvents();\r\n    }\r\n\r\n    public confirm() {\r\n        this.close(this.editor.getValue());\r\n    }\r\n\r\n    public close(value?: string) {\r\n        this.dialogRef.close(value);\r\n    }\r\n\r\n    private initEditor(contents: string, language = 'html') {\r\n        this.loading$.next(true);\r\n        this.lazyLoader.loadAsset('js/ace/ace.js', {type: 'js'}).then(() => {\r\n            this.editor = ace.edit(this.editorEl.nativeElement);\r\n            this.editor.getSession().setMode('ace/mode/' + language);\r\n            this.editor.setTheme('ace/theme/chrome');\r\n            this.editor.$blockScrolling = Infinity;\r\n            if (contents) this.editor.setValue(contents, 1);\r\n\r\n            this.editor.getSession().on('changeAnnotation', () => {\r\n                const annotations = this.editor.getSession().getAnnotations() as any[];\r\n\r\n                // hide !doctype syntax error\r\n                if (annotations[0] && /doctype first/.test(annotations[0].text)) {\r\n                    annotations.splice(0, 1);\r\n                    this.editor.getSession().setAnnotations(annotations);\r\n                    return;\r\n                }\r\n\r\n                // prevent editor submit if there are syntax errors\r\n                const syntaxInvalid = this.editor\r\n                    .getSession()\r\n                    .getAnnotations()\r\n                    .filter(a => a.type === 'error')\r\n                    .length > 0;\r\n                this.syntaxInvalid$.next(syntaxInvalid);\r\n            });\r\n            this.loading$.next(false);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Need to always send dialog data, regardless of how it was closed.\r\n     * Angular material does not provide easy way to do this, so\r\n     * we need to override backdrop click and escape key close events.\r\n     */\r\n    private overrideDialogCloseEvents() {\r\n        this.dialogRef.disableClose = true;\r\n\r\n        // close on backdrop click\r\n        this.dialogRef.backdropClick().subscribe(() => {\r\n            this.close();\r\n        });\r\n\r\n        // close on escape key\r\n        this.dialogRef.keydownEvents()\r\n            .pipe(filter(event => event.keyCode === ESCAPE))\r\n            .subscribe(() => this.close());\r\n    }\r\n}\r\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {FormBuilder} from '@angular/forms';\nimport {CodeEditorModalComponent} from '@common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {SetCustomCss, SetCustomHtml} from '@common/shared/appearance/commands/appearance-commands';\n\n@Component({\n    selector: 'custom-code-appearance-panel',\n    templateUrl: './custom-code-appearance-panel.component.html',\n    styleUrls: ['./custom-code-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomCodeAppearancePanelComponent implements OnInit {\n    public form = this.fb.group({\n        'custom-code.css': [''],\n        'custom-code.html': [''],\n    });\n\n    constructor(\n        public editor: AppearanceEditor,\n        private fb: FormBuilder,\n        private modal: Modal,\n        private toast: Toast,\n    ) {}\n\n    ngOnInit() {\n        const defaults = {};\n        Object.keys(this.form.controls).forEach(key => {\n            defaults[key] = this.editor.currentValue(key);\n        });\n        this.form.patchValue(defaults);\n    }\n\n    public openModal(type: 'css'|'html') {\n        const key = 'custom-code.' + type;\n        const initialValue = this.form.value[key] || '',\n            params = {contents: this.form.value[key], language: type};\n        this.modal.open(CodeEditorModalComponent, params)\n            .afterClosed()\n            .subscribe(value => {\n                // undefined means user closed modal without clicking \"update\" button\n                if (value === undefined || initialValue === value) return;\n                const newValue = {[key]: value};\n                this.form.patchValue(newValue);\n                this.editor.saveChanges(newValue).subscribe(() => {\n                    this.addCodeToPreview(type, value);\n                    this.toast.open('Custom code saved');\n                });\n            });\n    }\n\n    private addCodeToPreview(type: 'css'|'html', content: string) {\n        if (type === 'css') {\n            this.editor.postMessage(new SetCustomCss(content));\n        } else {\n            this.editor.postMessage(new SetCustomHtml(content));\n        }\n    }\n}\n","<appearance-panel-meta [path]=\"['Custom Code']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n   <button type=\"button\" class=\"nav-item\" (click)=\"openModal('css')\">\n      <span class=\"text\" trans>Custom CSS</span>\n      <span class=\"actions\" trans>Modify</span>\n   </button>\n   <button class=\"nav-item\" (click)=\"openModal('html')\">\n      <span class=\"text\" trans>Custom HTML & Javascript</span>\n      <span class=\"actions\" trans>Modify</span>\n   </button>\n</div>","<mat-sidenav-container>\r\n    <mat-sidenav [opened]=\"!leftColumnIsHidden\" [mode]=\"(breakpoints.isMobile$ | async) ? 'over' : 'side'\" class=\"sidebar\">\r\n        <div class=\"header\">\r\n            <div class=\"back-button\" (click)=\"closeEditor()\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </div>\r\n            <div class=\"title\" trans>Appearance Editor</div>\r\n            <button\r\n                    mat-raised-button\r\n                    color=\"accent\"\r\n                    class=\"button primary save-button\"\r\n                    (click)=\"editor.saveChanges()\"\r\n                    [disabled]=\"!(editor.changes$ | async) || (editor.loading$ | async)\"\r\n            >\r\n                <span *ngIf=\"editor.changes$ | async; else saved\" trans>Save</span>\r\n                <ng-template #saved>\r\n                    <span trans>Saved</span>\r\n                </ng-template>\r\n            </button>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"editor.activePanel$ | async as activePanel; else navigation\">\r\n            <ng-container [ngSwitch]=\"activePanel.name\">\r\n                <general-appearance-panel *ngSwitchCase=\"'general'\"></general-appearance-panel>\r\n                <themes-appearance-panel *ngSwitchCase=\"'themes'\"></themes-appearance-panel>\r\n                <menus-appearance-panel *ngSwitchCase=\"'menus'\"></menus-appearance-panel>\r\n                <seo-appearance-panel *ngSwitchCase=\"'seo-settings'\"></seo-appearance-panel>\r\n                <custom-code-appearance-panel *ngSwitchCase=\"'custom-code'\"></custom-code-appearance-panel>\r\n                <ng-container *ngSwitchDefault>\r\n                    <ng-template *ngIf=\"panelPortal$ | async as portal\" [cdkPortalOutlet]=\"portal\"></ng-template>\r\n                </ng-container>\r\n            </ng-container>\r\n        </ng-container>\r\n\r\n        <ng-template #navigation>\r\n            <div class=\"root-navigation\">\r\n                <a class=\"nav-item\" [routerLink]=\"[]\" [queryParams]=\"{panel: slugify(section.name)}\" *ngFor=\"let section of editor.config.sections\">\r\n                    <span class=\"text\" trans>{{viewName(section.name)}}</span>\r\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\r\n                </a>\r\n            </div>\r\n        </ng-template>\r\n\r\n    </mat-sidenav>\r\n\r\n    <mat-sidenav-content>\r\n        <div class=\"live-preview\">\r\n            <iframe src=\"about:blank\" #iframe></iframe>\r\n        </div>\r\n    </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n\r\n<button mat-fab (click)=\"toggleLeftSidebar()\" class=\"sidebar-toggle-button\">\r\n    <mat-icon svgIcon=\"edit\"></mat-icon>\r\n</button>","import {ChangeDetectionStrategy, Component, ElementRef, OnDestroy, OnInit, ViewChild} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {AppearanceEditor} from './appearance-editor/appearance-editor.service';\r\nimport {slugifyString} from '@common/core/utils/slugify-string';\r\nimport {Subscription} from 'rxjs';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\nimport {map} from 'rxjs/operators';\r\nimport {BreakpointsService} from '@common/core/ui/breakpoints.service';\r\n\r\n@Component({\r\n    selector: 'appearance',\r\n    templateUrl: './appearance.component.html',\r\n    styleUrls: ['./appearance.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AppearanceComponent implements OnInit, OnDestroy {\r\n    @ViewChild('iframe', { static: true }) iframe: ElementRef;\r\n    private routerSub: Subscription;\r\n    public leftColumnIsHidden = false;\r\n\r\n    public panelPortal$ = this.editor.activePanel$.pipe(map(panel => {\r\n        return (panel && panel.component) ? new ComponentPortal(panel.component) : null;\r\n    }));\r\n\r\n    constructor(\r\n        public editor: AppearanceEditor,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        public breakpoints: BreakpointsService,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.leftColumnIsHidden = this.breakpoints.isMobile$.value;\r\n        this.editor.init(\r\n            this.iframe.nativeElement,\r\n            this.route.snapshot.data.defaultSettings\r\n        );\r\n        this.routerSub = this.route.queryParams\r\n            .subscribe((params: {panel?: string}) => {\r\n                this.editor.openPanel(params.panel);\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.routerSub && this.routerSub.unsubscribe();\r\n    }\r\n\r\n    public closeEditor() {\r\n        this.router.navigate(['admin']);\r\n    }\r\n\r\n    public slugify(str: string) {\r\n        return slugifyString(str);\r\n    }\r\n\r\n    public viewName(name: string) {\r\n        return name.replace('-', ' ');\r\n    }\r\n\r\n    public toggleLeftSidebar() {\r\n        this.leftColumnIsHidden = !this.leftColumnIsHidden;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {CanDeactivate} from '@angular/router';\r\nimport {AppearanceComponent} from './appearance.component';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CanDeactivateAppearance implements CanDeactivate<AppearanceComponent> {\r\n    constructor(\r\n        private editor: AppearanceEditor,\r\n        private modal: Modal,\r\n    ) {}\r\n\r\n    canDeactivate(): Observable<boolean>|boolean {\r\n        if ( ! this.editor.changes$.value) return true;\r\n\r\n        return this.modal.show(ConfirmModalComponent, {\r\n            title: 'Close Appearance Editor',\r\n            body: 'Are you sure you want to close appearance editor?',\r\n            bodyBold: 'All unsaved changes will be lost.',\r\n            ok: 'Close',\r\n            cancel: 'Stay',\r\n        }).afterClosed();\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot} from '@angular/router';\r\nimport {catchError, mergeMap} from 'rxjs/operators';\r\nimport {EMPTY, Observable, of} from 'rxjs';\r\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\r\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AppearanceEditorResolver implements Resolve<GenericBackendResponse<{[key: string]: any}>> {\r\n    constructor(\r\n        private router: Router,\r\n        private http: AppHttpClient\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<GenericBackendResponse<{[key: string]: any}>> {\r\n        return this.http.get<GenericBackendResponse<{[key: string]: any}>>('admin/appearance/values').pipe(\r\n            catchError(() => {\r\n                this.router.navigate(['/admin']);\r\n                return EMPTY;\r\n            }),\r\n            mergeMap(response => {\r\n                if (response) {\r\n                    return of(response);\r\n                } else {\r\n                    this.router.navigate(['/admin']);\r\n                    return EMPTY;\r\n                }\r\n            })\r\n        );\r\n    }\r\n}\r\n\r\n","import {RouterModule, Routes} from '@angular/router';\r\nimport {NgModule} from '@angular/core';\r\nimport {AppearanceComponent} from './appearance.component';\r\nimport {CanDeactivateAppearance} from './can-deactivate-appearance.guard';\r\nimport {AuthGuard} from '../../guards/auth-guard.service';\r\nimport {AppearanceEditorResolver} from './appearance-editor/appearance-editor-resolver.service';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AppearanceComponent,\r\n        data: {permissions: ['appearance.update']},\r\n        resolve: {defaultSettings: AppearanceEditorResolver},\r\n        canActivate: [AuthGuard],\r\n        canDeactivate: [CanDeactivateAppearance],\r\n        children: [\r\n            {path: ''},\r\n            {path: ':panel'},\r\n            {path: ':panel/:activeItem'},\r\n        ]\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppearanceRoutingModule {}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {IconSelectorComponent} from '@common/shared/icon-selector/icon-selector.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\n\n\n@NgModule({\n    declarations: [\n        IconSelectorComponent,\n    ],\n    imports: [\n        CommonModule,\n        LoadingIndicatorModule,\n\n        MatButtonModule,\n        MatIconModule,\n    ],\n    exports: [\n        IconSelectorComponent,\n    ]\n})\nexport class IconSelectorModule {\n}\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {AppearanceComponent} from './appearance.component';\r\nimport {MenusAppearancePanelComponent} from './panels/menus-appearance-panel/menus-appearance-panel.component';\r\nimport {AddMenuItemPanelComponent} from './panels/menus-appearance-panel/menus/add-menu-item-panel/add-menu-item-panel.component';\r\nimport {AppearancePanelMetaComponent} from './appearance-panel-meta/appearance-panel-meta.component';\r\nimport {MenuItemsComponent} from './panels/menus-appearance-panel/menus/menu-items/menu-items.component';\r\nimport {AppearanceRoutingModule} from './appearance-routing.module';\r\nimport {CodeEditorModalComponent} from './panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component';\r\nimport {ThemesAppearancePanelComponent} from './panels/themes-appearance-panel/themes-appearance-panel.component';\r\nimport {CrupdateCssThemeModalComponent} from './panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component';\r\nimport {CssThemeColorsPanelComponent} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component';\r\nimport {GeneralAppearancePanelComponent} from '@common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component';\r\nimport {HighlightInPreviewDirective} from './highlight-in-preview.directive';\r\nimport {SeoAppearancePanelComponent} from '@common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component';\r\nimport {CustomCodeAppearancePanelComponent} from '@common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component';\r\nimport {AppearanceImageInputComponent} from '@common/admin/appearance/appearance-image-input/appearance-image-input.component';\r\nimport {IconSelectorModule} from '@common/shared/icon-selector/icon-selector.module';\r\nimport {TranslationsModule} from '@common/core/translations/translations.module';\r\nimport {ImageOrIconModule} from '@common/core/ui/image-or-icon/image-or-icon.module';\r\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {ColorPickerInputModule} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.module';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\n\r\n@NgModule({\r\n    imports: [\r\n        AppearanceRoutingModule,\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        IconSelectorModule,\r\n        TranslationsModule,\r\n        ImageOrIconModule,\r\n        LoadingIndicatorModule,\r\n        ColorPickerInputModule,\r\n\r\n        // material\r\n        MatMenuModule,\r\n        MatProgressBarModule,\r\n        MatIconModule,\r\n        MatButtonModule,\r\n        MatDialogModule,\r\n        MatExpansionModule,\r\n        DragDropModule,\r\n        MatSidenavModule,\r\n        PortalModule,\r\n        MatSlideToggleModule,\r\n    ],\r\n    exports: [\r\n        AppearancePanelMetaComponent,\r\n        HighlightInPreviewDirective,\r\n        AppearanceImageInputComponent,\r\n    ],\r\n    declarations: [\r\n        AppearanceComponent,\r\n        AddMenuItemPanelComponent,\r\n        AppearancePanelMetaComponent,\r\n        MenuItemsComponent,\r\n        CodeEditorModalComponent,\r\n        CrupdateCssThemeModalComponent,\r\n        CssThemeColorsPanelComponent,\r\n        AppearanceImageInputComponent,\r\n        MenusAppearancePanelComponent,\r\n        ThemesAppearancePanelComponent,\r\n        GeneralAppearancePanelComponent,\r\n        SeoAppearancePanelComponent,\r\n        CustomCodeAppearancePanelComponent,\r\n        HighlightInPreviewDirective,\r\n    ],\r\n})\r\nexport class BaseAppearanceModule {\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ColorPickerInputComponent} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.component';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {MatIconModule} from '@angular/material/icon';\n\n\n@NgModule({\n    declarations: [\n        ColorPickerInputComponent,\n    ],\n    imports: [\n        CommonModule,\n        TranslationsModule,\n        MatIconModule,\n    ],\n    exports: [\n        ColorPickerInputComponent,\n    ]\n})\nexport class ColorPickerInputModule {\n}\n","import { DOCUMENT, CommonModule } from '@angular/common';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Attribute, Inject, NgZone, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slider/slider.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\n\nconst _c0 = [\"sliderWrapper\"];\nconst activeEventOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n * @type {?}\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n * @type {?}\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n * @type {?}\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n * @type {?}\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlider)),\n    multi: true\n};\n/**\n * A simple change event emitted by the MatSlider component.\n */\nclass MatSliderChange {\n}\nif (false) {\n    /**\n     * The MatSlider that changed.\n     * @type {?}\n     */\n    MatSliderChange.prototype.source;\n    /**\n     * The new value of the source slider.\n     * @type {?}\n     */\n    MatSliderChange.prototype.value;\n}\n// Boilerplate for applying mixins to MatSlider.\n/**\n * \\@docs-private\n */\nclass MatSliderBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatSliderBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatSliderMixinBase = mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nclass MatSlider extends _MatSliderMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} _dir\n     * @param {?} tabIndex\n     * @param {?=} _animationMode\n     * @param {?=} _ngZone\n     * @param {?=} document\n     */\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _animationMode, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._animationMode = _animationMode;\n        this._ngZone = _ngZone;\n        this._invert = false;\n        this._max = 100;\n        this._min = 0;\n        this._step = 1;\n        this._thumbLabel = false;\n        this._tickInterval = 0;\n        this._value = null;\n        this._vertical = false;\n        /**\n         * Event emitted when the slider value has changed.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event emitted when the slider thumb moves.\n         */\n        this.input = new EventEmitter();\n        /**\n         * Emits when the raw value of the slider changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._percent = 0;\n        /**\n         * Whether or not the thumb is sliding.\n         * Used to determine if there should be a transition for the thumb and fill track.\n         */\n        this._isSliding = false;\n        /**\n         * Whether or not the slider is active (clicked or sliding).\n         * Used to shrink and grow the thumb as according to the Material Design spec.\n         */\n        this._isActive = false;\n        /**\n         * The size of a tick interval as a percentage of the size of the track.\n         */\n        this._tickIntervalPercent = 0;\n        /**\n         * The dimensions of the slider.\n         */\n        this._sliderDimensions = null;\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Subscription to the Directionality change EventEmitter.\n         */\n        this._dirChangeSubscription = Subscription.EMPTY;\n        /**\n         * Called when the user has put their pointer down on the slider.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Don't do anything if the slider is disabled or the\n            // user is using anything other than the main mouse button.\n            if (this.disabled || this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {\n                return;\n            }\n            this._runInsideZone((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const oldValue = this.value;\n                /** @type {?} */\n                const pointerPosition = getPointerPositionOnPage(event);\n                this._isSliding = true;\n                this._lastPointerEvent = event;\n                event.preventDefault();\n                this._focusHostElement();\n                this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n                this._bindGlobalEvents(event);\n                this._focusHostElement();\n                this._updateValueFromPosition(pointerPosition);\n                this._valueOnSlideStart = this.value;\n                this._pointerPositionOnStart = pointerPosition;\n                // Emit a change and input event if the value changed.\n                if (oldValue != this.value) {\n                    this._emitInputEvent();\n                    this._emitChangeEvent();\n                }\n            }));\n        });\n        /**\n         * Called when the user has moved their pointer after\n         * starting to drag. Bound on the document level.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._isSliding) {\n                // Prevent the slide from selecting anything else.\n                event.preventDefault();\n                /** @type {?} */\n                const oldValue = this.value;\n                this._lastPointerEvent = event;\n                this._updateValueFromPosition(getPointerPositionOnPage(event));\n                // Native range elements always emit `input` events when the value changed while sliding.\n                if (oldValue != this.value) {\n                    this._emitInputEvent();\n                }\n            }\n        });\n        /**\n         * Called when the user has lifted their pointer. Bound on the document level.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._isSliding) {\n                /** @type {?} */\n                const pointerPositionOnStart = this._pointerPositionOnStart;\n                /** @type {?} */\n                const currentPointerPosition = getPointerPositionOnPage(event);\n                event.preventDefault();\n                this._removeGlobalEvents();\n                this._valueOnSlideStart = this._pointerPositionOnStart = this._lastPointerEvent = null;\n                this._isSliding = false;\n                if (this._valueOnSlideStart != this.value && !this.disabled &&\n                    pointerPositionOnStart && (pointerPositionOnStart.x !== currentPointerPosition.x ||\n                    pointerPositionOnStart.y !== currentPointerPosition.y)) {\n                    this._emitChangeEvent();\n                }\n            }\n        });\n        /**\n         * Called when the window has lost focus.\n         */\n        this._windowBlur = (/**\n         * @return {?}\n         */\n        () => {\n            // If the window is blurred while dragging we need to stop dragging because the\n            // browser won't dispatch the `mouseup` and `touchend` events anymore.\n            if (this._lastPointerEvent) {\n                this._pointerUp(this._lastPointerEvent);\n            }\n        });\n        this._document = document;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this._runOutsizeZone((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const element = elementRef.nativeElement;\n            element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n            element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n        }));\n    }\n    /**\n     * Whether the slider is inverted.\n     * @return {?}\n     */\n    get invert() { return this._invert; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set invert(value) {\n        this._invert = coerceBooleanProperty(value);\n    }\n    /**\n     * The maximum value that the slider can have.\n     * @return {?}\n     */\n    get max() { return this._max; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set max(v) {\n        this._max = coerceNumberProperty(v, this._max);\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The minimum value that the slider can have.\n     * @return {?}\n     */\n    get min() { return this._min; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set min(v) {\n        this._min = coerceNumberProperty(v, this._min);\n        // If the value wasn't explicitly set by the user, set it to the min.\n        if (this._value === null) {\n            this.value = this._min;\n        }\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * The values at which the thumb will snap.\n     * @return {?}\n     */\n    get step() { return this._step; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set step(v) {\n        this._step = coerceNumberProperty(v, this._step);\n        if (this._step % 1 !== 0) {\n            this._roundToDecimal = (/** @type {?} */ (this._step.toString().split('.').pop())).length;\n        }\n        // Since this could modify the label, we need to notify the change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Whether or not to show the thumb label.\n     * @return {?}\n     */\n    get thumbLabel() { return this._thumbLabel; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     * @return {?}\n     */\n    get tickInterval() { return this._tickInterval; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tickInterval(value) {\n        if (value === 'auto') {\n            this._tickInterval = 'auto';\n        }\n        else if (typeof value === 'number' || typeof value === 'string') {\n            this._tickInterval = coerceNumberProperty(value, (/** @type {?} */ (this._tickInterval)));\n        }\n        else {\n            this._tickInterval = 0;\n        }\n    }\n    /**\n     * Value of the slider.\n     * @return {?}\n     */\n    get value() {\n        // If the value needs to be read and it is still uninitialized, initialize it to the min.\n        if (this._value === null) {\n            this.value = this._min;\n        }\n        return this._value;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set value(v) {\n        if (v !== this._value) {\n            /** @type {?} */\n            let value = coerceNumberProperty(v);\n            // While incrementing by a decimal we can end up with values like 33.300000000000004.\n            // Truncate it to ensure that it matches the label and to make it easier to work with.\n            if (this._roundToDecimal) {\n                value = parseFloat(value.toFixed(this._roundToDecimal));\n            }\n            this._value = value;\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the slider is vertical.\n     * @return {?}\n     */\n    get vertical() { return this._vertical; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /**\n     * The value to be used for display purposes.\n     * @return {?}\n     */\n    get displayValue() {\n        if (this.displayWith) {\n            // Value is never null but since setters and getters cannot have\n            // different types, the value getter is also typed to return null.\n            return this.displayWith((/** @type {?} */ (this.value)));\n        }\n        // Note that this could be improved further by rounding something like 0.999 to 1 or\n        // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n        // every change detection cycle.\n        if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n            return this.value.toFixed(this._roundToDecimal);\n        }\n        return this.value || 0;\n    }\n    /**\n     * set focus to the host element\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusHostElement(options);\n    }\n    /**\n     * blur the host element\n     * @return {?}\n     */\n    blur() {\n        this._blurHostElement();\n    }\n    /**\n     * The percentage of the slider that coincides with the value.\n     * @return {?}\n     */\n    get percent() { return this._clamp(this._percent); }\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     * @return {?}\n     */\n    get _invertAxis() {\n        // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n        // top. However from a y-axis standpoint this is inverted.\n        return this.vertical ? !this.invert : this.invert;\n    }\n    /**\n     * Whether the slider is at its minimum value.\n     * @return {?}\n     */\n    get _isMinValue() {\n        return this.percent === 0;\n    }\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     * @return {?}\n     */\n    get _thumbGap() {\n        if (this.disabled) {\n            return DISABLED_THUMB_GAP;\n        }\n        if (this._isMinValue && !this.thumbLabel) {\n            return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n        }\n        return 0;\n    }\n    /**\n     * CSS styles for the track background element.\n     * @return {?}\n     */\n    get _trackBackgroundStyles() {\n        /** @type {?} */\n        const axis = this.vertical ? 'Y' : 'X';\n        /** @type {?} */\n        const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n        /** @type {?} */\n        const sign = this._shouldInvertMouseCoords() ? '-' : '';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n        };\n    }\n    /**\n     * CSS styles for the track fill element.\n     * @return {?}\n     */\n    get _trackFillStyles() {\n        /** @type {?} */\n        const percent = this.percent;\n        /** @type {?} */\n        const axis = this.vertical ? 'Y' : 'X';\n        /** @type {?} */\n        const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n        /** @type {?} */\n        const sign = this._shouldInvertMouseCoords() ? '' : '-';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`,\n            // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n            // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n            // the value of the slider is 0, we can easily get into this situation. We force a\n            // recalculation by changing the element's `display` when it goes from 0 to any other value.\n            display: percent === 0 ? 'none' : ''\n        };\n    }\n    /**\n     * CSS styles for the ticks container element.\n     * @return {?}\n     */\n    get _ticksContainerStyles() {\n        /** @type {?} */\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the ticks container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        /** @type {?} */\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n        /** @type {?} */\n        let offset = this._tickIntervalPercent / 2 * 100;\n        return {\n            'transform': `translate${axis}(${sign}${offset}%)`\n        };\n    }\n    /**\n     * CSS styles for the ticks element.\n     * @return {?}\n     */\n    get _ticksStyles() {\n        /** @type {?} */\n        let tickSize = this._tickIntervalPercent * 100;\n        /** @type {?} */\n        let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n        /** @type {?} */\n        let axis = this.vertical ? 'Y' : 'X';\n        // Depending on the direction we pushed the ticks container, push the ticks the opposite\n        // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n        // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n        /** @type {?} */\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n        /** @type {?} */\n        let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n        /** @type {?} */\n        let styles = {\n            'backgroundSize': backgroundSize,\n            // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n            'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n        };\n        if (this._isMinValue && this._thumbGap) {\n            /** @type {?} */\n            let side;\n            if (this.vertical) {\n                side = this._invertAxis ? 'Bottom' : 'Top';\n            }\n            else {\n                side = this._invertAxis ? 'Right' : 'Left';\n            }\n            styles[`padding${side}`] = `${this._thumbGap}px`;\n        }\n        return styles;\n    }\n    /**\n     * @return {?}\n     */\n    get _thumbContainerStyles() {\n        /** @type {?} */\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the thumb container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        /** @type {?} */\n        let invertOffset = (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n        /** @type {?} */\n        let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n        return {\n            'transform': `translate${axis}(-${offset}%)`\n        };\n    }\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     * @return {?}\n     */\n    _shouldInvertMouseCoords() {\n        return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    }\n    /**\n     * The language direction for this slider element.\n     * @private\n     * @return {?}\n     */\n    _getDirection() {\n        return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} origin\n         * @return {?}\n         */\n        (origin) => {\n            this._isActive = !!origin && origin !== 'keyboard';\n            this._changeDetectorRef.detectChanges();\n        }));\n        if (this._dir) {\n            this._dirChangeSubscription = this._dir.change.subscribe((/**\n             * @return {?}\n             */\n            () => {\n                this._changeDetectorRef.markForCheck();\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n        element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n        this._lastPointerEvent = null;\n        this._removeGlobalEvents();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._dirChangeSubscription.unsubscribe();\n    }\n    /**\n     * @return {?}\n     */\n    _onMouseenter() {\n        if (this.disabled) {\n            return;\n        }\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    /**\n     * @return {?}\n     */\n    _onFocus() {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    /**\n     * @return {?}\n     */\n    _onBlur() {\n        this.onTouched();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onKeydown(event) {\n        if (this.disabled || hasModifierKey(event)) {\n            return;\n        }\n        /** @type {?} */\n        const oldValue = this.value;\n        switch (event.keyCode) {\n            case PAGE_UP:\n                this._increment(10);\n                break;\n            case PAGE_DOWN:\n                this._increment(-10);\n                break;\n            case END:\n                this.value = this.max;\n                break;\n            case HOME:\n                this.value = this.min;\n                break;\n            case LEFT_ARROW:\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                // sighted users, therefore we do not swap the meaning.\n                this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n                break;\n            case UP_ARROW:\n                this._increment(1);\n                break;\n            case RIGHT_ARROW:\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n                break;\n            case DOWN_ARROW:\n                this._increment(-1);\n                break;\n            default:\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                // it.\n                return;\n        }\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n            this._emitChangeEvent();\n        }\n        this._isSliding = true;\n        event.preventDefault();\n    }\n    /**\n     * @return {?}\n     */\n    _onKeyup() {\n        this._isSliding = false;\n    }\n    /**\n     * Use defaultView of injected document if available or fallback to global window reference\n     * @private\n     * @return {?}\n     */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /**\n     * Binds our global move and end events. They're bound at the document level and only while\n     * dragging so that the user doesn't have to keep their pointer exactly over the slider\n     * as they're swiping across the screen.\n     * @private\n     * @param {?} triggerEvent\n     * @return {?}\n     */\n    _bindGlobalEvents(triggerEvent) {\n        // Note that we bind the events to the `document`, because it allows us to capture\n        // drag cancel events where the user's pointer is outside the browser window.\n        /** @type {?} */\n        const document = this._document;\n        if (typeof document !== 'undefined' && document) {\n            /** @type {?} */\n            const isTouch = isTouchEvent(triggerEvent);\n            /** @type {?} */\n            const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const endEventName = isTouch ? 'touchend' : 'mouseup';\n            document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n            document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n            if (isTouch) {\n                document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n            }\n        }\n        /** @type {?} */\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.addEventListener('blur', this._windowBlur);\n        }\n    }\n    /**\n     * Removes any global event listeners that we may have added.\n     * @private\n     * @return {?}\n     */\n    _removeGlobalEvents() {\n        /** @type {?} */\n        const document = this._document;\n        if (typeof document !== 'undefined' && document) {\n            document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n            document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n            document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n            document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n            document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        }\n        /** @type {?} */\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.removeEventListener('blur', this._windowBlur);\n        }\n    }\n    /**\n     * Increments the slider by the given number of steps (negative number decrements).\n     * @private\n     * @param {?} numSteps\n     * @return {?}\n     */\n    _increment(numSteps) {\n        this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    }\n    /**\n     * Calculate the new value from the new physical location. The value will always be snapped.\n     * @private\n     * @param {?} pos\n     * @return {?}\n     */\n    _updateValueFromPosition(pos) {\n        if (!this._sliderDimensions) {\n            return;\n        }\n        /** @type {?} */\n        let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        /** @type {?} */\n        let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        /** @type {?} */\n        let posComponent = this.vertical ? pos.y : pos.x;\n        // The exact value is calculated from the event and used to find the closest snap value.\n        /** @type {?} */\n        let percent = this._clamp((posComponent - offset) / size);\n        if (this._shouldInvertMouseCoords()) {\n            percent = 1 - percent;\n        }\n        // Since the steps may not divide cleanly into the max value, if the user\n        // slid to 0 or 100 percent, we jump to the min/max value. This approach\n        // is slightly more intuitive than using `Math.ceil` below, because it\n        // follows the user's pointer closer.\n        if (percent === 0) {\n            this.value = this.min;\n        }\n        else if (percent === 1) {\n            this.value = this.max;\n        }\n        else {\n            /** @type {?} */\n            const exactValue = this._calculateValue(percent);\n            // This calculation finds the closest step by finding the closest\n            // whole number divisible by the step relative to the min.\n            /** @type {?} */\n            const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n            // The value needs to snap to the min and max.\n            this.value = this._clamp(closestValue, this.min, this.max);\n        }\n    }\n    /**\n     * Emits a change event if the current value is different from the last emitted value.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this._controlValueAccessorChangeFn(this.value);\n        this.valueChange.emit(this.value);\n        this.change.emit(this._createChangeEvent());\n    }\n    /**\n     * Emits an input event when the current value is different from the last emitted value.\n     * @private\n     * @return {?}\n     */\n    _emitInputEvent() {\n        this.input.emit(this._createChangeEvent());\n    }\n    /**\n     * Updates the amount of space between ticks as a percentage of the width of the slider.\n     * @private\n     * @return {?}\n     */\n    _updateTickIntervalPercent() {\n        if (!this.tickInterval || !this._sliderDimensions) {\n            return;\n        }\n        if (this.tickInterval == 'auto') {\n            /** @type {?} */\n            let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            /** @type {?} */\n            let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n            /** @type {?} */\n            let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n            /** @type {?} */\n            let pixelsPerTick = stepsPerTick * this.step;\n            this._tickIntervalPercent = pixelsPerTick / trackSize;\n        }\n        else {\n            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n        }\n    }\n    /**\n     * Creates a slider change object from the specified value.\n     * @private\n     * @param {?=} value\n     * @return {?}\n     */\n    _createChangeEvent(value = this.value) {\n        /** @type {?} */\n        let event = new MatSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n    }\n    /**\n     * Calculates the percentage of the slider that a value is.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _calculatePercentage(value) {\n        return ((value || 0) - this.min) / (this.max - this.min);\n    }\n    /**\n     * Calculates the value a percentage of the slider corresponds to.\n     * @private\n     * @param {?} percentage\n     * @return {?}\n     */\n    _calculateValue(percentage) {\n        return this.min + percentage * (this.max - this.min);\n    }\n    /**\n     * Return a number between two numbers.\n     * @private\n     * @param {?} value\n     * @param {?=} min\n     * @param {?=} max\n     * @return {?}\n     */\n    _clamp(value, min = 0, max = 1) {\n        return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     * @private\n     * @return {?}\n     */\n    _getSliderDimensions() {\n        return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    }\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     * @private\n     * @param {?=} options\n     * @return {?}\n     */\n    _focusHostElement(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /**\n     * Blurs the native element.\n     * @private\n     * @return {?}\n     */\n    _blurHostElement() {\n        this._elementRef.nativeElement.blur();\n    }\n    /**\n     * Runs a callback inside of the NgZone, if possible.\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    _runInsideZone(fn) {\n        // @breaking-change 9.0.0 Remove this function once `_ngZone` is a required parameter.\n        this._ngZone ? this._ngZone.run(fn) : fn();\n    }\n    /**\n     * Runs a callback outside of the NgZone, if possible.\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    _runOutsizeZone(fn) {\n        // @breaking-change 9.0.0 Remove this function once `_ngZone` is a required parameter.\n        this._ngZone ? this._ngZone.runOutsideAngular(fn) : fn();\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n}\nMatSlider.ɵfac = function MatSlider_Factory(t) { return new (t || MatSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nMatSlider.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlider, selectors: [[\"mat-slider\"]], viewQuery: function MatSlider_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n    } }, hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\", \"mat-focus-indicator\"], hostVars: 28, hostBindings: function MatSlider_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSlider_blur_HostBindingHandler() { return ctx._onBlur(); })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) { return ctx._onKeydown($event); })(\"keyup\", function MatSlider_keyup_HostBindingHandler() { return ctx._onKeyup(); })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() { return ctx._onMouseenter(); })(\"selectstart\", function MatSlider_selectstart_HostBindingHandler($event) { return $event.preventDefault(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._invertAxis)(\"mat-slider-invert-mouse-coords\", ctx._shouldInvertMouseCoords())(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue)(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue && ctx._thumbGap && ctx._invertAxis)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", color: \"color\", tabIndex: \"tabIndex\", invert: \"invert\", max: \"max\", min: \"min\", value: \"value\", step: \"step\", thumbLabel: \"thumbLabel\", tickInterval: \"tickInterval\", vertical: \"vertical\", displayWith: \"displayWith\" }, outputs: { change: \"change\", input: \"input\", valueChange: \"valueChange\" }, exportAs: [\"matSlider\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 13, vars: 6, consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]], template: function MatSlider_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelement(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11);\n        ɵngcc0.ɵɵtext(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackBackgroundStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._trackFillStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksContainerStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._ticksStyles);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._thumbContainerStyles);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵtextInterpolate(ctx.displayValue);\n    } }, directives: [ɵngcc3.NgStyle], styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatSlider.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nMatSlider.propDecorators = {\n    invert: [{ type: Input }],\n    max: [{ type: Input }],\n    min: [{ type: Input }],\n    step: [{ type: Input }],\n    thumbLabel: [{ type: Input }],\n    tickInterval: [{ type: Input }],\n    value: [{ type: Input }],\n    displayWith: [{ type: Input }],\n    vertical: [{ type: Input }],\n    change: [{ type: Output }],\n    input: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    _sliderWrapper: [{ type: ViewChild, args: ['sliderWrapper',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlider, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slider',\n                exportAs: 'matSlider',\n                providers: [MAT_SLIDER_VALUE_ACCESSOR],\n                host: {\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                    '(keydown)': '_onKeydown($event)',\n                    '(keyup)': '_onKeyup()',\n                    '(mouseenter)': '_onMouseenter()',\n                    // On Safari starting to slide temporarily triggers text selection mode which\n                    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n                    '(selectstart)': '$event.preventDefault()',\n                    'class': 'mat-slider mat-focus-indicator',\n                    'role': 'slider',\n                    '[tabIndex]': 'tabIndex',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.aria-valuemax]': 'max',\n                    '[attr.aria-valuemin]': 'min',\n                    '[attr.aria-valuenow]': 'value',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-slider-disabled]': 'disabled',\n                    '[class.mat-slider-has-ticks]': 'tickInterval',\n                    '[class.mat-slider-horizontal]': '!vertical',\n                    '[class.mat-slider-axis-inverted]': '_invertAxis',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if mouse coordinates need to be inverted.\n                    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n                    '[class.mat-slider-sliding]': '_isSliding',\n                    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                    '[class.mat-slider-vertical]': 'vertical',\n                    '[class.mat-slider-min-value]': '_isMinValue',\n                    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_trackBackgroundStyles\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['disabled', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { change: [{\n            type: Output\n        }], input: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], invert: [{\n            type: Input\n        }], max: [{\n            type: Input\n        }], min: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], step: [{\n            type: Input\n        }], thumbLabel: [{\n            type: Input\n        }], tickInterval: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], displayWith: [{\n            type: Input\n        }], _sliderWrapper: [{\n            type: ViewChild,\n            args: ['sliderWrapper']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_invert;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_max;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_min;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_step;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_thumbLabel;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_tickInterval;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_value;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_vertical;\n    /** @type {?} */\n    MatSlider.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._invert;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._max;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._min;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._step;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._thumbLabel;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._tickInterval;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._value;\n    /**\n     * Function that will be used to format the value before it is displayed\n     * in the thumb label. Can be used to format very large number in order\n     * for them to fit into the slider thumb.\n     * @type {?}\n     */\n    MatSlider.prototype.displayWith;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._vertical;\n    /**\n     * Event emitted when the slider value has changed.\n     * @type {?}\n     */\n    MatSlider.prototype.change;\n    /**\n     * Event emitted when the slider thumb moves.\n     * @type {?}\n     */\n    MatSlider.prototype.input;\n    /**\n     * Emits when the raw value of the slider changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatSlider.prototype.valueChange;\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @type {?}\n     */\n    MatSlider.prototype.onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._percent;\n    /**\n     * Whether or not the thumb is sliding.\n     * Used to determine if there should be a transition for the thumb and fill track.\n     * @type {?}\n     */\n    MatSlider.prototype._isSliding;\n    /**\n     * Whether or not the slider is active (clicked or sliding).\n     * Used to shrink and grow the thumb as according to the Material Design spec.\n     * @type {?}\n     */\n    MatSlider.prototype._isActive;\n    /**\n     * The size of a tick interval as a percentage of the size of the track.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._tickIntervalPercent;\n    /**\n     * The dimensions of the slider.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._sliderDimensions;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._controlValueAccessorChangeFn;\n    /**\n     * Decimal places to round to, based on the step amount.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._roundToDecimal;\n    /**\n     * Subscription to the Directionality change EventEmitter.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._dirChangeSubscription;\n    /**\n     * The value of the slider when the slide start event fires.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._valueOnSlideStart;\n    /**\n     * Position of the pointer when the dragging started.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._pointerPositionOnStart;\n    /**\n     * Reference to the inner slider wrapper element.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._sliderWrapper;\n    /**\n     * Keeps track of the last pointer event that was captured by the slider.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._lastPointerEvent;\n    /**\n     * Used to subscribe to global move and end events\n     * @type {?}\n     * @protected\n     */\n    MatSlider.prototype._document;\n    /**\n     * Called when the user has put their pointer down on the slider.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._pointerDown;\n    /**\n     * Called when the user has moved their pointer after\n     * starting to drag. Bound on the document level.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._pointerMove;\n    /**\n     * Called when the user has lifted their pointer. Bound on the document level.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._pointerUp;\n    /**\n     * Called when the window has lost focus.\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._windowBlur;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._dir;\n    /** @type {?} */\n    MatSlider.prototype._animationMode;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlider.prototype._ngZone;\n}\n/**\n * Returns whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the coordinates of a touch or mouse event relative to the viewport.\n * @param {?} event\n * @return {?}\n */\nfunction getPointerPositionOnPage(event) {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    /** @type {?} */\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n    return { x: point.clientX, y: point.clientY };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slider/slider-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSliderModule {\n}\nMatSliderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSliderModule });\nMatSliderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSliderModule_Factory(t) { return new (t || MatSliderModule)(); }, imports: [[CommonModule, MatCommonModule],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSliderModule, { declarations: function () { return [MatSlider]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatSlider,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSliderModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatSlider, MatCommonModule],\n                declarations: [MatSlider]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slider/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };\n\n//# sourceMappingURL=slider.js.map","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BaseAppearanceModule} from '@common/admin/appearance/base-appearance.module';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {ColorPickerInputModule} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.module';\nimport {HomepageAppearancePanelComponent} from './homepage-appearance-panel/homepage-appearance-panel.component';\nimport {LandingAppearancePanelComponent} from './landing-appearance-panel/landing-appearance-panel.component';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {RouterModule} from '@angular/router';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\n\n\n@NgModule({\n    declarations: [\n        HomepageAppearancePanelComponent,\n        LandingAppearancePanelComponent,\n    ],\n    imports: [\n        CommonModule,\n        BaseAppearanceModule,\n        ReactiveFormsModule,\n        ColorPickerInputModule,\n        TranslationsModule,\n        RouterModule,\n        LoadingIndicatorModule,\n\n        // material\n        MatIconModule,\n        MatButtonModule,\n        TranslationsModule,\n        MatSliderModule,\n        MatAutocompleteModule,\n        DragDropModule,\n    ]\n})\nexport class AppAppearanceModule {\n}\n"]}